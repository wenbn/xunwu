package www.ucforward.com.manager;

import com.alibaba.dubbo.common.json.JSON;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.maps.DistanceMatrixApi;
import com.google.maps.model.*;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.junit.Test;
import org.omg.CORBA.OBJ_ADAPTER;
import org.quartz.JobExecutionException;
import org.utils.StringUtil;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.entity.*;
import www.ucforward.com.serviceInter.HousesService;
import www.ucforward.com.serviceInter.MemberService;
import www.ucforward.com.serviceInter.OrderService;
import www.ucforward.com.utils.*;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import java.util.*;

/**
 * 系统分配订单
 * @author wenbn
 * @version 1.0
 * @date 2018/6/11
 */
public class SystemOrderManager {

//    private OrderService orderService = SpringContextUtils.getBean("orderService");
//    private HousesService housesService = SpringContextUtils.getBean("housesService");
//    private MemberService memberService = SpringContextUtils.getBean("memberService");

    /**
     * 外获，外看 自动关闭抢单功能
     * @throws Exception
     */
    public void closePanicBuyingOrder()throws Exception {
        //orderService = SpringContextUtils.getBean("orderService");
        OrderService orderService = SpringContextUtils.getBean("orderService");
        Map<Object,Object> condition =  new HashMap<>();
//        long time = 30*60*1000;//30分钟
//        Date date = new Date();
//        Date afterDate = new Date(date.getTime() - time);//过期时间
//        condition.put("closeOpenOrderTime",afterDate);//关闭订单时间
        Date date = new Date();
        condition.put("openOrderCloseTime",date);//关闭订单时间
        condition.put("isFinished",0);//未完成
        condition.put("isOpenOrder",1);//可以抢单
        //condition.put("orderType",0);//外获订单
        //自定义查询列名
        List<String> queryColumn = new ArrayList<>();
        queryColumn.add("ID poolId");//主键ID
        queryColumn.add("VERSION_NO versionNo");//版本号
        condition.put("queryColumn",queryColumn);
        ResultVo resultVo = orderService.selectCustomColumnNamesList(HsSystemOrderPool.class, condition);
        if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
            List<Map<Object,Object>> resultList = (List<Map<Object, Object>>) resultVo.getDataSet();
            if(resultList == null || resultList.size()==0){
                return ;
            }
            List<HsSystemOrderPool> pools = new ArrayList<>();
            for (Map<Object, Object> result : resultList) {
                HsSystemOrderPool orderPool = new HsSystemOrderPool();
                orderPool.setId(StringUtil.getAsInt(StringUtil.trim(result.get("poolId"))));
                orderPool.setIsOpenOrder(0);//关闭自动抢单功能 ，开始派单流程
                orderPool.setVersionNo(StringUtil.getAsInt(StringUtil.trim(result.get("versionNo"))));
                orderPool.setRemark("抢单时间到，系统关闭抢单功能");
                orderPool.setUpdateTime(date);
                pools.add(orderPool);
            }
            condition.put("data",pools);
            resultVo = orderService.batchUpdate(new HsSystemOrderPool(),condition);
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                System.out.println("系统关闭抢单功能");
            }
        }
    }


    /**
     * 外获超过48小时自动关闭订单
     * @throws Exception
     */
    public void closeSysOrder()throws Exception {
        //orderService = SpringContextUtils.getBean("orderService");
        //memberService = SpringContextUtils.getBean("memberService");
        OrderService orderService = SpringContextUtils.getBean("orderService");
        MemberService memberService = SpringContextUtils.getBean("memberService");
        Map<Object,Object> condition =  new HashMap<>();
        Date date = new Date();
        condition.put("closeTime",date);//关闭订单时间
        condition.put("orderType",0);//只有外获才有48小时关单
        condition.put("isFinished",0);//未完成
        //自定义查询列名
        List<String> queryColumn = new ArrayList<>();
        queryColumn.add("ID poolId");//主键ID
        queryColumn.add("HOUSE_ID houseId");//主键ID
        queryColumn.add("VERSION_NO versionNo");//版本号
        condition.put("queryColumn",queryColumn);
        ResultVo resultVo = orderService.selectCustomColumnNamesList(HsSystemOrderPool.class, condition);
        if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
            List<Map<Object,Object>> resultList = (List<Map<Object, Object>>) resultVo.getDataSet();
            if(resultList == null || resultList.size()==0){
                return ;
            }
            List<HsSystemOrderPool> pools = new ArrayList<>();
            //保存订单池ID
            List<Integer> poolIds = new ArrayList<>();
            for (Map<Object, Object> result : resultList) {
                HsSystemOrderPool orderPool = new HsSystemOrderPool();
                int poolId = StringUtil.getAsInt(StringUtil.trim(result.get("poolId")));
                poolIds.add(poolId);
                orderPool.setId(poolId);
                orderPool.setIsOpenOrder(0);//关闭自动抢单功能 ，开始派单流程
                orderPool.setIsFinished(4);//订单已关闭
                orderPool.setVersionNo(StringUtil.getAsInt(StringUtil.trim(result.get("versionNo"))));
                orderPool.setRemark("此订单已超过48小时，系统关闭订单");
                orderPool.setUpdateTime(date);
                pools.add(orderPool);
            }
            condition.put("data",pools);
            //关闭当前订单池状态
            resultVo = orderService.batchUpdate(new HsSystemOrderPool(),condition);
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                System.out.println("系统关闭关闭单功能");
                condition.clear();
                queryColumn.clear();
                queryColumn.add("ID orderId");//订单ID
                queryColumn.add("VERSION_NO versionNo");//版本号
                condition.put("queryColumn",queryColumn);
                condition.put("isDel",0);//删除
                condition.put("poolIds",poolIds);
                //根据订单池查询业务员任务，同步修改任务状态
                ResultVo orderVo = memberService.selectCustomColumnNamesList(HsSystemUserOrderTasks.class, condition);
                List<Map<Object,Object>> orderResultList = (List<Map<Object, Object>>) orderVo.getDataSet();
                if(orderResultList!=null && orderResultList.size()>0){
                    List<HsSystemUserOrderTasks> orderTasks = new ArrayList<>();
                    for (Map<Object, Object> order : orderResultList) {
                        HsSystemUserOrderTasks orderTask = new HsSystemUserOrderTasks();
                        orderTask.setId(StringUtil.getAsInt(StringUtil.trim(order.get("orderId"))));
                        orderTask.setIsFinished(4);
                        orderTask.setRemark("此订单已超过48小时，系统关闭订单");
                        orderTask.setVersionNo(StringUtil.getAsInt(StringUtil.trim(order.get("versionNo"))));
                        orderTasks.add(orderTask);
                    }
                    //关闭任务状态
                    condition.clear();
                    condition.put("tasksList",orderTasks);
                    resultVo = memberService.batchUpdate(new HsSystemUserOrderTasks(),condition);
                    if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                        System.out.println("系统关闭业务员任务状态");
                    }
                }


            }
        }
    }

    /**
     * 系统分配外获订单
     * 处理逻辑，先查询是否有外获订单
     * @throws Exception
     */
    public void systemAllocationOutsideOrder()throws Exception {
//        orderService = SpringContextUtils.getBean("orderService");
//        memberService = SpringContextUtils.getBean("memberService");
//        housesService = SpringContextUtils.getBean("housesService");
        OrderService orderService = SpringContextUtils.getBean("orderService");
        HousesService housesService = SpringContextUtils.getBean("housesService");
        MemberService memberService = SpringContextUtils.getBean("memberService");
        Map<Object,Object> condition =  new HashMap<>();
        condition.put("isFinished",0);//查询未完成订单
        List<Integer> orderTypes = Lists.newArrayList();
        orderTypes.add(0);
        orderTypes.add(2);
        condition.put("orderTypes",orderTypes);//处理外获的订单
        condition.put("isOpenOrder",0);//是否开启抢单0:未开启
        condition.put("isDel",0);
        //自定义查询列名
        List<String> queryColumn = new ArrayList<>();
        queryColumn.add("ID poolId");//主键ID
        queryColumn.add("ORDER_TYPE orderType");//订单类型
        queryColumn.add("HOUSE_ID houseId");//房源ID
        queryColumn.add("APPLY_ID applyId");//申请ID
        queryColumn.add("APPOINTMENT_MEET_PLACE appointmentMeetPlace");//见面地点
        queryColumn.add("ESTIMATED_TIME estimatedTime");//预计完成时间
        queryColumn.add("VERSION_NO versionNo");//版本号
        condition.put("queryColumn",queryColumn);
        //查询当前符合条件的订单池
        ResultVo resultVo = orderService.selectCustomColumnNamesList(HsSystemOrderPool.class, condition);
        if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
            Date date = resultVo.getSystemTime();//获取系统当前时间
            List<Map<Object,Object>> resultList = (List<Map<Object, Object>>) resultVo.getDataSet();
            if(resultList == null || resultList.size()==0){
                return ;
            }
            List<Integer> houseIds = Lists.newArrayList();
            resultList.forEach((result) -> houseIds.add(StringUtil.getAsInt(StringUtil.trim(result.get("houseId")))));

            //判断房源钥匙是否在平台
            Map<Object,Object> queryFilter =Maps.newHashMap();
            queryColumn.clear();
            queryColumn.add("ID houseId");//主键ID
            queryColumn.add("HAVE_KEY haveKey");//是否有钥匙：0>无,1有
            queryFilter.put("queryColumn",queryColumn);
            queryFilter.put("houseIds",houseIds);
            ResultVo houseVo = housesService.selectCustomColumnNamesList(HsMainHouse.class, queryFilter);
            List<Map<Object,Object>> houseList = (List<Map<Object, Object>>) houseVo.getDataSet();
            for (Map<Object, Object> result : resultList) {
                int haveKey = 0;
                int houseId = StringUtil.getAsInt(StringUtil.trim(result.get("houseId")));
                for (Map<Object, Object> house : houseList) {
                    int _houseId = StringUtil.getAsInt(StringUtil.trim(house.get("houseId")));
                    int _haveKey = StringUtil.getAsInt(StringUtil.trim(house.get("haveKey")));
                    if(_haveKey == 1 && houseId == _houseId){//钥匙在平台
                        haveKey = 1;
                        break;
                    }
                }
                result.put("haveKey",haveKey);
            }

            //查询所有外获业务员的ID
            //获取业务员位置及信息
            condition.clear();
            condition.put("locked",0);
            condition.put("isForbidden",0);
            condition.put("isDel",0);
            List<String> roleIds = new ArrayList<String>();
            roleIds.add("a0a080f42e6f13b3a2df133f073095dd");//外获业务员
            roleIds.add("2ece77221ad0b89f14f35899a8a63886");//钥匙管理员
            condition.put("roleIds",roleIds);
            //获取所有外获业务员
            List<Map<Object,Object>> users = memberService.selectOutsideUser(condition);
            if(users == null){
                System.out.println("当前没有可用的业务员，此次派单失败");
                return ;
            }
            //查询所有用户的订单数
            //钥匙管理员数据
            List<Map<Object, Object>> keymasterUsers = Lists.newArrayList();
            List<Integer> userIds = Lists.newArrayList();
            for(int i = users.size() - 1; i >= 0; i--){
                Map<Object, Object> user = users.get(i);
                int userId  = StringUtil.getAsInt(StringUtil.trim(user.get("userId")));
                if(StringUtil.trim(user.get("roleId")).equals("2ece77221ad0b89f14f35899a8a63886")){//如果钥匙管理员
                    keymasterUsers.add(user);
                    users.remove(user);
                    continue;
                }
                userIds.add(userId);
            }

            condition.clear();
            condition.put("locked",0);
            condition.put("isTransferOrder",0);//是否转单 0->未转单，1已转单
            condition.put("isFinished",0);//是否完成0:未完成，1：已完成（用于控制系统是否自动派单）2：业主取消预约3：租客/买家取消预约，4：订单已关闭
            condition.put("isDel",0);
            condition.put("userIds",userIds);
            ResultVo userTasksVo = memberService.selectGroupUserTasksByCondition(condition);
            //查询失败此次不做订单分配
            if(userTasksVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS){
                return ;
            }
            //保存当前用户的订单数
            List<Map<Object,Object>> userTasks  = (List<Map<Object, Object>>) userTasksVo.getDataSet();
            for (Map<Object, Object> user : users) {
                String userId = StringUtil.trim(user.get("userId"));
                boolean isFind = false;//所有业务员是否有任务
                for (Map<Object, Object> userTask : userTasks) {
                    String _userId = StringUtil.trim(userTask.get("userId"));
                    if(userId.equals(_userId)){
                        isFind = true;
                        user.put("taskCount", userTask.get("count"));
                        break;
                    }
                }
                if(!isFind){
                    user.put("taskCount", 0);
                }
            }

            //符合条件的派单
            List<HsSystemOrderPool> orderPools = new ArrayList<HsSystemOrderPool>();
            List<HsSystemOrderPoolLog> orderPoolLogs = new ArrayList<HsSystemOrderPoolLog>();
            List<HsSystemUserOrderTasks> userOrderTasks = new ArrayList<HsSystemUserOrderTasks>();
            List<HsSystemUserOrderTasksLog> orderTaskLogs = new ArrayList<HsSystemUserOrderTasksLog>();
            //分配派单逻辑
            //系统订单池
            for (Map<Object, Object> map : resultList) {
                //此订单约定的见面地点
                String appointmentMeetPlace = StringUtil.trim(map.get("appointmentMeetPlace"));
                int houseId = StringUtil.getAsInt(StringUtil.trim(map.get("houseId")));//房源ID
                int mixTaskCount = 10000;//单量最少的业务员
                int _userId = -1;
                int userSizeLeng = users.size();//总的用户长度
                int index = 0;//记录当前
                //业务员信息
                for ( int i  = 0 ; i< userSizeLeng ;i++) {
                    Map<Object, Object> user = users.get(i);
                    //判断业务员订单选择最小的
                    int taskCount = StringUtil.getAsInt(StringUtil.trim(user.get("taskCount")));
                    if(taskCount<=mixTaskCount){//选择最小的
                        mixTaskCount = taskCount;
                        _userId = StringUtil.getAsInt(StringUtil.trim(user.get("userId")));
                        index = i;
                    }
                    if(i == userSizeLeng-1 && _userId != -1){//完成了所有业务员的计算 匹配到用户
                        users.get(index).put("taskCount",taskCount+1);
                    }
                }
                if(_userId != -1){//匹配到用户

                    String keymasterId = "-1";
                    if(StringUtil.getAsInt(StringUtil.trim(map.get("haveKey"))) == 1){//钥匙在平台
                        //查询所属钥匙管理员信息
                        for ( int i  = 0 ; i< keymasterUsers.size() ;i++) {
                            Map<Object, Object> keymasterUser = keymasterUsers.get(i);
                            //判断钥匙管理员所属位置
                            String userId = StringUtil.trim(keymasterUser.get("userId"));
                            String city = StringUtil.trim(keymasterUser.get("city"));
                            String community = StringUtil.trim(keymasterUser.get("community"));
                            if( -1 != appointmentMeetPlace.indexOf(city) && -1 != appointmentMeetPlace.indexOf(community)){ // 查询所属业务员负责地址
                                keymasterId = userId;
                                break;
                            }
                        }
                    }

                    int poolId  = StringUtil.getAsInt(StringUtil.trim(map.get("poolId")));
                    int orderType = StringUtil.getAsInt(StringUtil.trim(map.get("orderType")));
                    int applyId = StringUtil.getAsInt(StringUtil.trim(map.get("applyId")));
                    HsSystemOrderPool orderPool = new HsSystemOrderPool();
                    orderPool.setId(poolId);
                    orderPool.setIsFinished(1);
                    orderPool.setRemark("系统自动派单完成");
                    orderPool.setUpdateTime(date);
                    orderPool.setVersionNo(StringUtil.getAsInt(StringUtil.trim(map.get("versionNo"))));
                    orderPools.add(orderPool);

                    HsSystemOrderPoolLog log = new HsSystemOrderPoolLog();
                    log.setOrderType(orderType);//外获订单
                    log.setNodeType(1);
                    log.setPoolId(poolId);
                    log.setIsDel(0);
                    log.setCreateTime(date);
                    log.setUpdateTime(date);
                    log.setPostTime(date);
                    log.setRemarks("系统自动派单完成--外获业务员接单");
                    orderPoolLogs.add(log);

                    HsSystemUserOrderTasks tasks = new HsSystemUserOrderTasks();
                    tasks.setHouseId(houseId);
                    tasks.setApplyId(applyId);
                    tasks.setUserId(_userId);
                    tasks.setPoolId(poolId);
                    tasks.setTaskType(orderType);//外获任务
                    tasks.setCreateTime(date);
                    tasks.setEstimatedTime((Date) map.get("estimatedTime"));
                    tasks.setRemark("系统自动派单完成--外获业务员接单");
                    tasks.setStandby1(keymasterId);//钥匙管理员ID
                    tasks.setStandby2("0");//未完成
                    userOrderTasks.add(tasks);

                    HsSystemUserOrderTasksLog tasksLog = new HsSystemUserOrderTasksLog();
                    tasksLog.setNodeType(0);
                    tasksLog.setPoolId(poolId);
                    tasks.setIsDel(0);
                    tasksLog.setCreateTime(date);
                    tasksLog.setRemarks("系统自动派单完成--外获业务员接单");
                    orderTaskLogs.add(tasksLog);
                }
            }

            if(userOrderTasks!=null && userOrderTasks.size()>0){
                condition.put("data",userOrderTasks);
                condition.put("logData",orderTaskLogs);
                resultVo = memberService.batchInsert(new HsSystemUserOrderTasks(),condition);
                if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    condition.clear();
                    condition.put("data",orderPools);
                    condition.put("logData",orderPoolLogs);
                    resultVo = orderService.batchUpdate(new HsSystemOrderPool(),condition);
                }
            }
        }
    }


    /**
     * 系统分配外看订单
     * 处理逻辑，先查询是否有外看订单
     * @throws Exception
     */
    public void systemAllocationLookOutOrder()throws Exception {
//        orderService = SpringContextUtils.getBean("orderService");
//        memberService = SpringContextUtils.getBean("memberService");
//        housesService = SpringContextUtils.getBean("housesService");
        OrderService orderService = SpringContextUtils.getBean("orderService");
        HousesService housesService = SpringContextUtils.getBean("housesService");
        MemberService memberService = SpringContextUtils.getBean("memberService");
        Map<Object,Object> condition =  new HashMap<>();
        condition.put("isFinished",0);//查询未完成订单
        condition.put("orderType",1);//处理外获的订单
        condition.put("isOpenOrder",0);//是否开启抢单0:未开启
        condition.put("isDel",0);
        //自定义查询列名
        List<String> queryColumn = new ArrayList<>();
        queryColumn.add("ID poolId");//主键ID
        queryColumn.add("ORDER_TYPE orderType");//订单类型
        queryColumn.add("HOUSE_ID houseId");//房源ID
        queryColumn.add("APPLY_ID applyId");//申请ID
        queryColumn.add("ESTIMATED_TIME estimatedTime");//预计完成时间
        queryColumn.add("APPOINTMENT_MEET_PLACE appointmentMeetPlace");//见面地点
        queryColumn.add("ESTIMATED_TIME estimatedTime");//预计完成时间
        queryColumn.add("VERSION_NO versionNo");//版本号
        condition.put("queryColumn",queryColumn);
        condition.put("pageIndex",0);
        condition.put("pageSize",1);
        //查询当前符合条件的订单池
        ResultVo resultVo = orderService.selectCustomColumnNamesList(HsSystemOrderPool.class, condition);
        if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
            Date date = resultVo.getSystemTime();//获取系统当前时间
            List<Map<Object,Object>> lists = (List<Map<Object, Object>>) resultVo.getDataSet();
            if(lists == null || lists.size()==0){
                return ;
            }
            Map<Object,Object> resultMap = lists.get(0);

            //查询所有外获业务员的ID
            //获取业务员位置及信息
            condition.clear();
            condition.put("locked",0);
            condition.put("isForbidden",0);
            condition.put("isDel",0);
            List<String> roleIds = new ArrayList<String>();
            roleIds.add("202cb962ac59075b964b07152d234b70");//外看业务员
            roleIds.add("2ece77221ad0b89f14f35899a8a63886");//钥匙管理员
            condition.put("roleIds",roleIds);
            //获取所有外看业务员
            List<Map<Object,Object>> users = memberService.selectOutsideUser(condition);
            //钥匙管理员数据
            List<Map<Object, Object>> keymasterUsers = Lists.newArrayList();
            List<Integer> userIds = Lists.newArrayList();
            for(int i = users.size() - 1; i >= 0; i--){
                Map<Object, Object> user = users.get(i);
                int userId  = StringUtil.getAsInt(StringUtil.trim(user.get("userId")));
                if(StringUtil.trim(user.get("roleId")).equals("2ece77221ad0b89f14f35899a8a63886")){//如果钥匙管理员
                    keymasterUsers.add(user);
                    users.remove(user);
                    continue;
                }
                userIds.add(userId);
            }
            if(users == null){
                System.out.println("当前没有可用的业务员，此次派单失败");
                return ;
            }

            condition.clear();
            condition.put("isFinished",0);//是否完成0:未完成，1：已完成（用于控制系统是否自动派单）2：业主取消预约3：租客/买家取消预约，4：订单已关闭
            condition.put("taskType",1);//外看订单
            condition.put("isDel",0);
            long time = 30*60*1000;//60分钟
            Date beforeEstimatedTime = new Date(date.getTime() - time);//任务前1小时*/
            Date afterEstimatedTime = new Date(date.getTime() + time);//任务后1小时*/
            condition.put("beforeEstimatedTime",beforeEstimatedTime);
            condition.put("afterEstimatedTime",afterEstimatedTime);

            //自定义查询列名
            queryColumn.clear();
            queryColumn.add("USER_ID userId");//业务员ID
            condition.put("queryColumn",queryColumn);
            //排除前1小时和后1小时的
            ResultVo userTasksVo = memberService.selectCustomColumnNamesList(HsSystemUserOrderTasks.class, condition);
            //查询失败此次不做订单分配
            if(resultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS){
                return ;
            }
            //非空闲业务员
            List<Integer> busyUsers = new ArrayList<>();
            List<Map<Object,Object>> busyUserList = (List<Map<Object, Object>>) userTasksVo.getDataSet();
            if(busyUserList!=null && busyUserList.size()>0){
                for (Map<Object, Object> busyUser : busyUserList) {
                    //业务员ID
                    int busyUserId = StringUtil.getAsInt(StringUtil.trim(busyUser.get("userId")));
                    for (Map<Object, Object> user : users) {
                        if(busyUserId == StringUtil.getAsInt(StringUtil.trim(user.get("userId")))){
                            user.remove(user);//将业务员排除此次派单过程
                            userIds.remove((Integer)busyUserId);
                            break;
                        }
                    }
                }
            }

            //统计业务员今天的任务数
            condition.clear();
            condition.put("locked",0);
            condition.put("isTransferOrder",0);//是否转单 0->未转单，1已转单
            condition.put("isFinished",0);//是否完成0:未完成，1：已完成（用于控制系统是否自动派单）2：业主取消预约3：租客/买家取消预约，4：订单已关闭
            condition.put("isDel",0);
            condition.put("toDays",1);//只查询今天的任务数
            condition.put("userIds",userIds);
            //统计今天的单量
            ResultVo userTasksGroupVo = memberService.selectGroupUserTasksByCondition(condition);
            List<Map<Object,Object>> userTasks  = (List<Map<Object, Object>>) userTasksGroupVo.getDataSet();
            for (Map<Object, Object> user : users) {
                String userId = StringUtil.trim(user.get("userId"));
                boolean isFind = false;//所有业务员是否有任务
                for (Map<Object, Object> userTask : userTasks) {
                    String _userId = StringUtil.trim(userTask.get("userId"));
                    if(userId.equals(_userId)){
                        isFind = true;
                        user.put("taskCount", userTask.get("count"));
                        break;
                    }
                }
                if(!isFind){
                    user.put("taskCount", 0);
                }
            }

            //符合条件的派单
            List<HsSystemOrderPool> orderPools = new ArrayList<HsSystemOrderPool>();
            List<HsSystemOrderPoolLog> orderPoolLogs = new ArrayList<HsSystemOrderPoolLog>();
            List<HsSystemUserOrderTasks> userOrderTasks = new ArrayList<HsSystemUserOrderTasks>();
            List<HsSystemUserOrderTasksLog> orderTaskLogs = new ArrayList<HsSystemUserOrderTasksLog>();
            //分配派单逻辑
            //系统订单池
            //此订单约定的见面地点
            String appointmentMeetPlace = StringUtil.trim(resultMap.get("appointmentMeetPlace"));
            int mixTaskCount = 10000;//单量最少的业务员
            int _userId = -1;
            int index = 0;//记录当前
            //业务员信息
            for ( int i  = 0 ; i< users.size() ;i++) {
                Map<Object, Object> user = users.get(i);
                //判断业务员所属位置
                String city = StringUtil.trim(user.get("city"));
                String community = StringUtil.trim(user.get("community"));
                int taskCount = StringUtil.getAsInt(StringUtil.trim(user.get("taskCount")));
                if( -1 != appointmentMeetPlace.indexOf(city) && -1 != appointmentMeetPlace.indexOf(community)){ // 查询所属业务员负责地址
                    if(taskCount<=mixTaskCount){//选择最小的
                        mixTaskCount = taskCount;
                        _userId = StringUtil.getAsInt(StringUtil.trim(user.get("userId")));
                        index = i;
                    }
                }else{
                    users.remove(user);
                }
                if(i == users.size()-1 && _userId != -1){//完成了所有业务员的计算 匹配到用户
                    users.get(index).put("taskCount",taskCount+1);
                }
            }
            if(_userId != -1){//匹配到用户

                int poolId  = StringUtil.getAsInt(StringUtil.trim(resultMap.get("poolId")));
                int orderType = StringUtil.getAsInt(StringUtil.trim(resultMap.get("orderType")));
                int houseId = StringUtil.getAsInt(StringUtil.trim(resultMap.get("houseId")));//申请ID
                int applyId = StringUtil.getAsInt(StringUtil.trim(resultMap.get("applyId")));//申请ID

                //判断房源钥匙是否在平台
                Map<Object,Object> queryFilter =Maps.newHashMap();
                queryColumn.clear();
                queryColumn.add("ID houseId");//主键ID
                queryColumn.add("HAVE_KEY haveKey");//是否有钥匙：0>无,1有
                queryFilter.put("queryColumn",queryColumn);
                queryFilter.put("id",houseId);
                ResultVo houseVo = housesService.selectCustomColumnNamesList(HsMainHouse.class, queryFilter);
                List<Map<Object,Object>> houseList = (List<Map<Object, Object>>) houseVo.getDataSet();
                String keymasterId = "-1";//钥匙管理员ID
                if(houseList!=null && houseList.size()>0){
                    Map<Object,Object> houseMap = houseList.get(0);
                    if(StringUtil.getAsInt(StringUtil.trim(houseMap.get("haveKey"))) == 1){//钥匙在平台
                        //查询所属钥匙管理员信息
                        for ( int i  = 0 ; i< keymasterUsers.size() ;i++) {
                            Map<Object, Object> keymasterUser = keymasterUsers.get(i);
                            //判断钥匙管理员所属位置
                            String userId = StringUtil.trim(keymasterUser.get("userId"));
                            String city = StringUtil.trim(keymasterUser.get("city"));
                            String community = StringUtil.trim(keymasterUser.get("community"));
                            if( -1 != appointmentMeetPlace.indexOf(city) && -1 != appointmentMeetPlace.indexOf(community)){ // 查询所属业务员负责地址
                                keymasterId = userId;
                                break;
                            }
                        }
                    }
                }

                HsSystemOrderPool orderPool = new HsSystemOrderPool();
                orderPool.setId(poolId);
                orderPool.setIsFinished(1);
                orderPool.setRemark("系统自动派单完成");
                orderPool.setUpdateTime(date);
                orderPool.setVersionNo(StringUtil.getAsInt(StringUtil.trim(resultMap.get("versionNo"))));
                orderPools.add(orderPool);

                HsSystemOrderPoolLog log = new HsSystemOrderPoolLog();
                log.setOrderType(orderType);//外获订单
                log.setNodeType(1);
                log.setPoolId(poolId);
                log.setIsDel(0);
                log.setCreateTime(date);
                log.setUpdateTime(date);
                log.setPostTime(date);
                log.setRemarks("系统自动派单完成--外看业务员分发单");
                orderPoolLogs.add(log);

                HsSystemUserOrderTasks tasks = new HsSystemUserOrderTasks();
                tasks.setHouseId(houseId);
                tasks.setApplyId(applyId);
                tasks.setUserId(_userId);
                tasks.setPoolId(poolId);
                tasks.setTaskType(orderType);//外获任务
                tasks.setCreateTime(date);
                tasks.setEstimatedTime((Date) resultMap.get("estimatedTime"));
                tasks.setRemark("系统自动派单完成--外看业务员分发单");
                tasks.setStandby1(keymasterId);//钥匙管理员ID
                tasks.setStandby2("0");//未完成
                userOrderTasks.add(tasks);

                HsSystemUserOrderTasksLog tasksLog = new HsSystemUserOrderTasksLog();
                tasksLog.setNodeType(0);
                tasksLog.setPoolId(poolId);
                tasks.setIsDel(0);
                tasksLog.setCreateTime(date);
                tasksLog.setRemarks("系统自动派单完成--外看业务员分发单");
                orderTaskLogs.add(tasksLog);
            }

            if(userOrderTasks!=null && userOrderTasks.size()>0){
                condition.put("data",userOrderTasks);
                condition.put("logData",orderTaskLogs);
                resultVo = memberService.batchInsert(new HsSystemUserOrderTasks(),condition);
                if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    condition.clear();
                    condition.put("data",orderPools);
                    condition.put("logData",orderPoolLogs);
                    resultVo = orderService.batchUpdate(new HsSystemOrderPool(),condition);

                    ResultVo seeHouseVo = memberService.updateSeeHouseApply(resultMap);
                }
            }
        }
    }



    public void testBatchInsert() throws Exception {
        Map<Object,Object> condition =  new HashMap<>();
//        orderService = SpringContextUtils.getBean("orderService");
//        memberService = SpringContextUtils.getBean("memberService");
        OrderService orderService = SpringContextUtils.getBean("orderService");
        MemberService memberService = SpringContextUtils.getBean("memberService");
        //符合条件的派单
        List<HsSystemOrderPool> orderPools = new ArrayList<HsSystemOrderPool>();
        List<HsSystemOrderPoolLog> orderPoolLogs = new ArrayList<HsSystemOrderPoolLog>();
        List<HsSystemUserOrderTasks> orderTasks = new ArrayList<HsSystemUserOrderTasks>();
        List<HsSystemUserOrderTasksLog> orderTaskLogs = new ArrayList<HsSystemUserOrderTasksLog>();
        Date now_date = new Date();
        for (int i = 0; i < 10; i++) {
            HsSystemOrderPool orderPool = new HsSystemOrderPool();
            orderPool.setId(i+1);
            orderPool.setIsFinished(1);
            orderPool.setRemark("系统自动派单完成");
            orderPool.setUpdateTime(now_date);
            orderPools.add(orderPool);

            HsSystemOrderPoolLog log = new HsSystemOrderPoolLog();
            log.setOrderType(0);
            log.setNodeType(1);
            log.setPoolId(i+1);
            log.setIsDel(0);
            log.setCreateTime(now_date);
            log.setUpdateTime(now_date);
            log.setPostTime(now_date);
            log.setRemarks("系统自动派单完成--外获业务员接单");
            orderPoolLogs.add(log);

            HsSystemUserOrderTasks tasks = new HsSystemUserOrderTasks();
            tasks.setHouseId(i+1);
            tasks.setUserId(i+1);
            tasks.setPoolId(i+1);
            tasks.setTaskType(1);
            tasks.setCreateTime(now_date);
            tasks.setRemark("distance :"+100+i+"  duration : " +100+i);
            orderTasks.add(tasks);

            HsSystemUserOrderTasksLog tasksLog = new HsSystemUserOrderTasksLog();
            tasksLog.setNodeType(0);
            tasksLog.setPoolId(i+1);
            tasks.setIsDel(0);
            tasksLog.setCreateTime(now_date);
            tasksLog.setRemarks("系统派单创建任务");
            orderTaskLogs.add(tasksLog);
        }
        if(orderPools!=null &&orderPools.size()>0){
            condition.clear();
            condition.put("data",orderPools);
            condition.put("logData",orderPoolLogs);
            ResultVo resultVo = orderService.batchUpdate(new HsSystemOrderPool(),condition);
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                condition.put("data",orderTasks);
                condition.put("logData",orderTaskLogs);
                resultVo = memberService.batchInsert(new HsSystemUserOrderTasks(),condition);
            }
        }
    }
    public void systemDistributionOrder(){

        OrderService orderService = SpringContextUtils.getBean("orderService");
        MemberService memberService = SpringContextUtils.getBean("memberService");
        HousesService housesService = SpringContextUtils.getBean("housesService");
        Map<Object,Object> condition = new HashMap<Object,Object>();
        condition.put("isFinished",0);//查询未完成订单
        condition.put("orderType",0);//处理外获的订单
        condition.put("isDel",0);
        try {
            //查询外获的订单
            ResultVo resultVo = orderService.selectList(new HsSystemOrderPool(), condition, 0);
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                List<Map<Object,Object>> orders = (List<Map<Object,Object>>) resultVo.getDataSet();
                if(orders==null || orders.size()==0) return;
                //0外获订单->1-外看订单->2合同订单
                List<Integer> houseIds = new ArrayList<Integer>();//房源ids
                List<Integer> str1 = new ArrayList<Integer>();//外获订单
                List<Integer> str2 = new ArrayList<Integer>();//外看订单
                List<Integer> str3 = new ArrayList<Integer>();//合同订单
                for (Map<Object,Object> order : orders) {
                    Integer orderType = StringUtil.getAsInt(StringUtil.trim(order.get("orderType")));
                    Integer houseId = StringUtil.getAsInt(StringUtil.trim(order.get("houseId")));
                    houseIds.add(houseId);
                    if(orderType == 0){
                        str1.add(houseId);
                    }else if(orderType == 1){
                        str2.add(houseId);
                    }else if(orderType == 2){
                        str3.add(houseId);
                    }
                }
                if(houseIds==null || houseIds.size()==0) return;
                //去重
                HashSet h = new HashSet(houseIds);
                houseIds.clear();
                houseIds.addAll(h);
                condition.clear();
                condition.put("houseIds",houseIds);
                //获取房源位置
                List<Map<Object,Object>> houses = housesService.loadHousesPosition(condition);
                if(houses == null){
                    System.out.println("房源信息获取异常");
                    return ;
                }
                //获取业务员位置及信息
                condition.clear();
                condition.put("locked",0);
                condition.put("isForbidden",0);
                condition.put("isDel",0);
                List<String> roleIds = new ArrayList<String>();
                if(str1.size()>0){
                    roleIds.add("a0a080f42e6f13b3a2df133f073095dd");//外获业务员
                }
                if(str2.size()>0 || str3.size()>0){
                    roleIds.add("202cb962ac59075b964b07152d234b70");//外看业务员
                }
                condition.put("roleIds",roleIds);
                //计算可用的业务员
                List<Map<Object,Object>> users = memberService.allotUsableUsers(condition);
                if(users == null){
                    System.out.println("当前没有可用的业务员，此次派单失败");
                    return ;
                }
                int size  = houses.size();
                List<LatLng> waihuo_destinationLists = new ArrayList<>();//外获业务员
                List<LatLng> waikan_destinationLists = new ArrayList<>();//外看业务员
                for (int j=0;j<size;j++ ) {
                    Map<Object, Object> house = houses.get(j);
                    double longitude = StringUtil.getDouble(StringUtil.trim(house.get("longitude")));
                    double latitude = StringUtil.getDouble(StringUtil.trim(house.get("latitude")));
                    Integer _houseId = StringUtil.getAsInt(StringUtil.trim(house.get("id")));
                    LatLng LatLng = new LatLng(latitude,longitude);
                    if(str1.contains(_houseId)){
                        waihuo_destinationLists.add(LatLng);
                    }else{
                        waikan_destinationLists.add(LatLng);
                    }
                }
                LatLng[] waihuo_destinations = new LatLng[waihuo_destinationLists.size()];//外获
                LatLng[] waikan_destinations = new LatLng[waikan_destinationLists.size()];//外看
                waihuo_destinations = (LatLng[]) waihuo_destinationLists.toArray(waihuo_destinations);
                waikan_destinations = (LatLng[]) waikan_destinationLists.toArray(waikan_destinations);
                //房源与订单关联
                for(int i=0;i<users.size();i++){
                    Map<Object,Object> suitable = new HashMap<Object,Object>();
                    Map<Object,Object> user = users.get(i);
                    double _longitude = (double) user.get("longitude");
                    double _latitude = (double) user.get("latitude");
                    LatLng origins = new LatLng(_latitude,_longitude);//地点
                    String roleId = StringUtil.trim(user.get("roleId"));//角色类型
                    DistanceMatrix await = null;
                    if(roleId.equals("a0a080f42e6f13b3a2df133f073095dd")){//外获业务员
                        await = DistanceMatrixApi.newRequest(GoogleMapUtil.context).origins(origins).destinations(waihuo_destinations).mode(TravelMode.DRIVING).await();
                    }else if(roleId.equals("202cb962ac59075b964b07152d234b70")){//外看业务员
                        await = DistanceMatrixApi.newRequest(GoogleMapUtil.context).origins(origins).destinations(waikan_destinations).mode(TravelMode.DRIVING).await();
                    }
                    System.out.println(JsonUtil.toJson(await));
                    int optimalUserIndex = -1;
                    for (DistanceMatrixRow row : await.rows) {
                        DistanceMatrixElement[] elements = row.elements;
                        if(elements[0].duration==null) break; ;
                        long min = elements[0].duration.inSeconds;
                        for (DistanceMatrixElement element : elements) {
                            optimalUserIndex ++;
                            if(element.status==DistanceMatrixElementStatus.OK){
                                Distance distance = element.distance;
                                Duration duration = element.duration;
                                if(min>duration.inSeconds){
                                    min = duration.inSeconds;
                                    suitable.put("distance",distance.inMeters);// 距离
                                    suitable.put("distanceValue",distance.humanReadable);
                                    suitable.put("duration",duration.inSeconds);// 持续的时间
                                    suitable.put("durationValue",duration.humanReadable);
                                }
                            }
                        }
                    }
                    Integer houseId = (Integer) houses.get(optimalUserIndex).get("id");
                    if(str1.contains(houseId)){
                        waihuo_destinationLists.remove(optimalUserIndex);
                        waihuo_destinations = (LatLng[]) waihuo_destinationLists.toArray(waihuo_destinations);
                    }else{
                        waikan_destinationLists.remove(optimalUserIndex);
                        waikan_destinations = (LatLng[]) waikan_destinationLists.toArray(waikan_destinations);
                    }
                    suitable.put("houseId",houseId);
                    user.putAll(suitable);
                    suitable.clear();
                }
                //符合条件的派单
                List<HsSystemOrderPool> orderPools = new ArrayList<HsSystemOrderPool>();
                List<HsSystemOrderPoolLog> orderPoolLogs = new ArrayList<HsSystemOrderPoolLog>();
                List<HsSystemUserOrderTasks> orderTasks = new ArrayList<HsSystemUserOrderTasks>();
                List<HsSystemUserOrderTasksLog> orderTaskLogs = new ArrayList<HsSystemUserOrderTasksLog>();
                Date now_date = new Date();
                for (Map<Object,Object> order : orders) {
                    Integer _houseId = StringUtil.getAsInt(StringUtil.trim(order.get("houseId")));
                    Integer id = StringUtil.getAsInt(StringUtil.trim(order.get("id")));
                    Integer orderType = StringUtil.getAsInt(StringUtil.trim(order.get("orderType")));
                    for (Map<Object, Object> user : users) {
                        Integer houseId = StringUtil.getAsInt(StringUtil.trim(user.get("houseId")), -1);
                        if (houseId == _houseId) {
                            Integer userId = StringUtil.getAsInt(StringUtil.trim(user.get("userId")), -1);
                            HsSystemOrderPool orderPool = new HsSystemOrderPool();
                            orderPool.setId(id);
                            orderPool.setIsFinished(1);
                            orderPool.setRemark("系统自动派单完成");
                            orderPool.setUpdateTime(now_date);
                            orderPools.add(orderPool);

                            HsSystemOrderPoolLog log = new HsSystemOrderPoolLog();
                            log.setOrderType(orderType);
                            log.setNodeType(1);
                            log.setPoolId(id);
                            log.setIsDel(0);
                            log.setCreateTime(now_date);
                            log.setUpdateTime(now_date);
                            log.setPostTime(now_date);
                            log.setRemarks("系统自动派单完成--外获业务员接单");
                            orderPoolLogs.add(log);

                            HsSystemUserOrderTasks tasks = new HsSystemUserOrderTasks();
                            tasks.setHouseId(houseId);
                            tasks.setUserId(userId);
                            tasks.setPoolId(id);
                            tasks.setTaskType(orderType);
                            tasks.setCreateTime(now_date);
                            tasks.setRemark("distance :"+user.get("distanceValue") +"  duration :" +user.get("durationValue") );
                            orderTasks.add(tasks);

                            HsSystemUserOrderTasksLog tasksLog = new HsSystemUserOrderTasksLog();
                            tasksLog.setNodeType(0);
                            tasksLog.setPoolId(id);
                            tasks.setIsDel(0);
                            tasksLog.setCreateTime(now_date);
                            tasksLog.setRemarks("系统派单创建任务");
                            orderTaskLogs.add(tasksLog);
                        }
                    }
                }
                if(orderPools!=null &&orderPools.size()>0){
                    condition.clear();
                    condition.put("data",orderPools);
                    condition.put("logData",orderPoolLogs);
                    resultVo = orderService.batchUpdate(new HsSystemOrderPool(),condition);
                    if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                        condition.put("data",orderTasks);
                        condition.put("logData",orderTaskLogs);
                        resultVo = memberService.batchInsert(new HsSystemUserOrderTasks(),condition);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
