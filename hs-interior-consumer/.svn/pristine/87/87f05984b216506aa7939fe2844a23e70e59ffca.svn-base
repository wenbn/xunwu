package www.ucforward.com.controller.houses;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.utils.StringUtil;
import www.ucforward.com.constants.AppRquestParamsConstant;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.entity.HsHouseLog;
import www.ucforward.com.index.entity.HouseSearchCondition;
import www.ucforward.com.manager.HousesAdminManager;
import www.ucforward.com.utils.JsonUtil;
import www.ucforward.com.utils.RequestUtil;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;


@Controller
@RequestMapping("houses")
public class HousesAdminController {

    // 日志记录器
    private static Logger logger = LoggerFactory.getLogger(HousesAdminController.class); // 日志记录

    @Resource
    private HousesAdminManager housesManager;

    /**
     * 获取房源列表申请
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value="selectHousingApplys", method = RequestMethod.POST)
    @ResponseBody
    public  String selectHousingApplys(HttpServletRequest request,HttpServletResponse response) throws  IllegalAccessException{
        ResultVo vo = new ResultVo();
        Map<Object,Object> condition = new HashMap<Object, Object>();
        try {
            Map map = RequestUtil.getParameterMap(request);
            String pageIndex = StringUtil.trim(map.get("pageIndex"),"1");//当前页
            int languageVersion = StringUtil.getAsInt(StringUtil.trim(map.get("languageVersion"),"0"));//语言版本
            int isCheck = StringUtil.getAsInt(StringUtil.trim(map.get("isCheck"),"1"));//是否审核
            condition.put("pageIndex",pageIndex);//当前页
            condition.put("isCheck",isCheck);//当前页
            condition.put("languageVersion",languageVersion);//当前页
            condition.put("pageSize", AppRquestParamsConstant.APP_PAGE_SIZE);//每页显示条数
            vo = housesManager.selectHousingApplys(condition);
        } catch (Exception e) {
            logger.error("HousesController controller selectHousingApplys Method Exception :——》:" + e.getMessage());
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 获取房源申请详情
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value="getHousingApplyDetail", method = RequestMethod.POST)
    @ResponseBody
    public  String getHousingApplyDetail(HttpServletRequest request,HttpServletResponse response) throws  IllegalAccessException{
        ResultVo vo = new ResultVo();
        Map<Object,Object> condition = new HashMap<Object, Object>();
        try {
            Map map = RequestUtil.getParameterMap(request);
            String id = StringUtil.trim(map.get("id"));//房源申请ID
            if(!StringUtil.hasText(id)){
                vo.setResult(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR);
                vo.setMessage(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            condition.put("id",id);
            vo = housesManager.getHousingApplyDetail(condition);
        } catch (Exception e) {
            logger.error("HousesController controller getHousingApplyDetail Method Exception :——》:" + e.getMessage());
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 客服审核业主申请房源信息
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value="housing/apply/check", method = RequestMethod.POST)
    @ResponseBody
    public  String checkHousingApply(HttpServletRequest request,HttpServletResponse response) throws  IllegalAccessException{
        ResultVo vo = new ResultVo();
        Map<Object,Object> condition = new HashMap<Object, Object>();
        try {
            Map map = RequestUtil.getParameterMap(request);
            String id = StringUtil.trim(map.get("id"));//房源申请ID
            if(!StringUtil.hasText(id)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            int isCheck = StringUtil.getAsInt(StringUtil.trim(map.get("isCheck"),"1"));//是否审核
            condition.put("id",id);//房源申请ID
            condition.put("isCheck",isCheck);//审核状态
            vo = housesManager.checkHousingApply(condition);
        } catch (Exception e) {
            logger.error("HousesController controller checkHousingApply  Method Exception :——》:" + e.getMessage());
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);

        }
        return JsonUtil.toJson(vo);
    }


    /**
     * 客服审核房源信息
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value="house/check", method = RequestMethod.POST)
    @ResponseBody
    public  String checkHouse(HttpServletRequest request,HttpServletResponse response) throws Exception{
        ResultVo vo = null;
        Map<Object,Object> condition = new HashMap<Object, Object>();
        try {
            Map map = RequestUtil.getParameterMap(request);
            //当前登录用户ID
            String token = map.get("token").toString();
            String memberId = RequestUtil.analysisToken(token).getUserId();
            String id = StringUtil.trim(map.get("houseId"));//房源ID
            if(!StringUtil.hasText(id)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            //封装memberID
            condition.put("memberId",memberId);
            condition.put("houseId",id);//房源ID
            vo = housesManager.checkHouse(condition);
        } catch (Exception e) {
            logger.error("HousesController controller checkHouse  Method Exception :——》:" + e.getMessage());
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(vo);
    }


    /**
     * 测试接口
     * 创建房源索引
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value="createHouseIndex", method = RequestMethod.POST)
    @ResponseBody
    public  String createHouseIndex(HttpServletRequest request,HttpServletResponse response) throws  IllegalAccessException{
        ResultVo vo = new ResultVo();
        Map<Object,Object> condition = new HashMap<Object, Object>();
        try {
            Map map = RequestUtil.getParameterMap(request);
            String id = StringUtil.trim(map.get("id"));//房源ID
            if(!StringUtil.hasText(id)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            condition.put("id",id);//房源申请ID
            condition.put("isCheck",1);//审核状态
            condition.put("isDel",0);//审核状态
            vo = housesManager.createHouseIndex(condition);
        } catch (Exception e) {
            logger.error("HousesController controller checkHousingApply  Method Exception :——》:" + e.getMessage());
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 测试接口
     * 查询房源数据
     * @param request
     * @param response
     * @return
     */
    @RequestMapping(value="findHouses", method = RequestMethod.POST)
    @ResponseBody
    public  String findHouseIndex(HttpServletRequest request, HttpServletResponse response, HouseSearchCondition condition) throws  IllegalAccessException{
        ResultVo vo = new ResultVo();
        try {
            //Map map = RequestUtil.getParameterMap(request);
           // condition.setKeywords("大三房");
            condition.setCity("深圳市");
//            condition.setMinPrice(10000);
//            condition.setMaxPrice(20000);
//            condition.setMinArea(10);
//            condition.setMaxArea(100);
            //condition.setHouseConfigDictcode("20025");
            vo = housesManager.findHouseIndex(condition);
        } catch (Exception e) {
            logger.error("HousesController controller checkHousingApply  Method Exception :——》:" + e.getMessage());
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 处理下架功能
     * @param request
     * @param response
     * @param houseLog
     * @return
     */
    @RequestMapping(value = "toHandleWithdraw",method = RequestMethod.POST)
    @ResponseBody
    public String toHandleWithdraw(HttpServletRequest request, HttpServletResponse response, HsHouseLog houseLog){
        ResultVo result = new ResultVo();
        try {
            String houseId = houseLog.getHouseId() == null ? "" :houseLog.getHouseId().toString();
            if(!StringUtil.hasText(houseId)){
                result.setResult(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR);
                result.setMessage(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(result);
            }

            result = housesManager.toHandleWithdraw(houseLog);
        } catch (Exception e) {
            logger.error("HousesAdminController toHandleWithdraw Exception message:"+e.getMessage());
            result.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            result.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(result);
    }
}
