package www.ucforward.com.manager.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import org.springframework.stereotype.Service;
import org.utils.StringUtil;
import www.ucforward.com.constants.Constant;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.entity.HsHouseLog;
import www.ucforward.com.entity.HsMainHouse;
import www.ucforward.com.entity.HsMember;
import www.ucforward.com.entity.HsOwnerHousingApplication;
import www.ucforward.com.index.entity.HouseSearchCondition;
import www.ucforward.com.manager.HousesAdminManager;
import www.ucforward.com.serviceInter.HousesService;
import www.ucforward.com.serviceInter.MemberService;
import www.ucforward.com.serviceInter.OrderService;
import www.ucforward.com.serviceInter.SearchService;
import www.ucforward.com.utils.SystemCacheUtil;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import java.util.*;

@Service("housesAdminManager")
public class HousesAdminManagerImpl implements HousesAdminManager {

    @Resource
    private HousesService housesService;//房源相关
    @Resource
    private OrderService orderService;//订单相关
    @Resource
    private SearchService searchService;
    //人员相关
    @Resource
    private MemberService memberService;

    /**
     * 查询房源申请列表
     * @param condition
     * @return
     */
    @Override
    public ResultVo selectHousingApplys(Map<Object, Object> condition) {
        ResultVo result = new ResultVo();
        try {
            //获取房源列表;
            ResultVo resultVo = housesService.selectList(new HsOwnerHousingApplication(), condition, 1);
            if(resultVo.getResult()==ResultConstant.SYS_REQUIRED_SUCCESS ){
                List<HsOwnerHousingApplication> hsOwnerHousingApplications = (List<HsOwnerHousingApplication>) resultVo.getDataSet();
                Map<Object, Object> cacheDictCodes = SystemCacheUtil.getCacheDictCodes();
                condition.clear();
                condition.put("data",hsOwnerHousingApplications);
                condition.put("dictCodes",cacheDictCodes);
                resultVo.setDataSet(condition);
            }
            return resultVo;
        } catch (Exception e) {
            e.printStackTrace();
            result.setResult(ResultConstant.HOUSES_DATA_EXCEPTION);
            result.setMessage("addOwnerHousingApply Exception message:" + e.getMessage());
        }
        return result;
    }

    /**
     * 获取房源详情
     * @param condition
     * @return
     */
    @Override
    public ResultVo getHousingApplyDetail(Map<Object, Object> condition) {
        ResultVo result = new ResultVo();
        try {
            //获取房源列表;
            int id  = StringUtil.getAsInt(StringUtil.trim(condition.get("id")));
            ResultVo resultVo = housesService.select(id ,new HsOwnerHousingApplication());
            if(resultVo.getResult()==ResultConstant.SYS_REQUIRED_SUCCESS ){
                HsOwnerHousingApplication ownerHouse = (HsOwnerHousingApplication) resultVo.getDataSet();
                Map<Object, Object> cacheDictCodes = SystemCacheUtil.getCacheDictCodes();
                condition.clear();
                condition.put("data",ownerHouse);
                condition.put("dictCodes",cacheDictCodes);
                resultVo.setDataSet(condition);
            }
            return resultVo;
        } catch (Exception e) {
            e.printStackTrace();
            result.setResult(ResultConstant.HOUSES_DATA_EXCEPTION);
            result.setMessage("addOwnerHousingApply Exception message:" + e.getMessage());
        }
        return result;
    }

    /**
     * 客服审核业主申请房源信息
     * @param condition
     * @return
     */
    @Override
    public ResultVo checkHousingApply(Map<Object, Object> condition) {
        ResultVo vo = null;
        try {
            vo = housesService.checkHousingApplyTx(condition);
            if(vo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                //加入订单池
                condition.putAll((Map<Object, Object>) vo.getDataSet());
                vo = orderService.addSystemOrderPoolTx(condition);
            }
        } catch (Exception e) {
            e.printStackTrace();
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 客服审核房源信息
     * @param condition
     * @return
     */
    @Override
    public ResultVo checkHouse(Map<Object, Object> condition) {
        ResultVo vo = null;
        try {
            vo = housesService.checkHouse(condition);
        } catch (Exception e) {
            e.printStackTrace();
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 创建房源索引
     * @param condition
     * @return
     */
    @Override
    public ResultVo createHouseIndex(Map<Object, Object> condition) {
        ResultVo vo = null;
        try {
            int id = StringUtil.getAsInt(StringUtil.trim(condition.get("id")));
            //vo = housesService.selectList(new HsMainHouse(),condition,1);
            vo = searchService.index(id);
        } catch (Exception e) {
            e.printStackTrace();
            ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    @Override
    public ResultVo findHouseIndex(HouseSearchCondition condition) {
        ResultVo vo = null;
        try {
            vo = searchService.query(condition);
            if(vo.getResult()==ResultConstant.SYS_REQUIRED_SUCCESS ){
                List<Integer> houseIds = (List<Integer>) vo.getDataSet();
                if(houseIds!=null && houseIds.size()>0){//
                    Map<Object, Object> queryFilter = new HashMap<>();
                    queryFilter.put("houseIds",houseIds);
                    vo = housesService.selectList(new HsMainHouse(), queryFilter, 1);
//                    if(vo.getResult()==ResultConstant.SYS_REQUIRED_SUCCESS ){
//                        List<HsMainHouse> houses = (List<HsMainHouse>) vo.getDataSet();
//
//                    }
                }
                System.out.println("查询到的房源数据："+houseIds.size());
            }
        } catch (Exception e) {
            e.printStackTrace();
            ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 处理下架
     * @param houseLog
     * @return
     */
    @Override
    public ResultVo toHandleWithdraw(HsHouseLog houseLog) {
        ResultVo result = new ResultVo();
        try {
            int createBy = houseLog.getCreateBy() == null ? 0 :houseLog.getCreateBy();
            Date date = new Date();
            houseLog.setNodeType(3); //下架
            houseLog.setUpdateBy(createBy); //更新人为提交申请的人（当前登录用户）
            houseLog.setBid(0);
            houseLog.setOperatorUid(createBy);
            houseLog.setOperatorType(1); //1：普通会员，2：商家，3：系统管理员
            houseLog.setCreateTime(date);
            houseLog.setUpdateTime(date);
            houseLog.setPostTime(date);
            //修改房源主信息表中的状态
            HsMainHouse mainHouse = new HsMainHouse();
            mainHouse.setId(houseLog.getHouseId());
            mainHouse.setHouseStatus(Constant.HOUSE_WITHDRAW_STATUS); //下架状态
            result = housesService.updateRecord(mainHouse);
            if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                result = housesService.insert(houseLog);
            }
        } catch (Exception e) {
            e.printStackTrace();
            result.setDataSet(null);
            result.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            result.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return result;
    }

    @Override
    public ResultVo getOwnerHousingApplication(Map<Object, Object> condition) {
        ResultVo result = new ResultVo();
        List<Map<Object,Object>> dataSet = new ArrayList<>();
        try {
            //1.获取申请信息
            result = housesService.selectList(new HsOwnerHousingApplication(),condition,0);

            if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                //2.根据房源申请信息获取，房源所属人员memberIds
                List<Integer> memberIds = new ArrayList<>();
                List<Map<Object,Object>> list = (List<Map<Object,Object>>)result.getDataSet();
                list.forEach(map->{
                    int memberId = Integer.parseInt(StringUtil.trim(map.get("memberId")));
                    memberIds.add(memberId);
                });
                //3.根据获取到的memberIds获取人员手机号map
                //人员手机号map key 人员id value 人员手机号
                Map<Integer,String> mobileMap = new HashMap<>(10);
                condition.clear();
                //自定义查询列名
                List<String> queryColumn = new ArrayList<>();
                //主键ID
                queryColumn.add("ID id");
                //手机号
                queryColumn.add("MEMBER_MOBLE memberMoble");
                condition.put("queryColumn",queryColumn);
                condition.put("memberIds",memberIds);
                ResultVo memberResultVo = memberService.selectList(new HsMember(), condition, 0);
                if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    List<HsMember> memberList = (List<HsMember>) memberResultVo.getDataSet();
                    memberList.forEach(hsMember->{
                        Integer id = Integer.parseInt(StringUtil.trim(hsMember.getId()));
                        String memberMoble = StringUtil.trim(hsMember.getMemberMoble());
                        mobileMap.put(id,memberMoble);
                    });
                }
                //4.根据上面获取到的人员手机号map,对房源申请信息结果集进行重新封装，将人员手机号封装进去
                list.forEach(map->{
                    String memberIdStr = StringUtil.trim(map.get("memberId"));
                    //未查询到人员信息默认手机号为空串
                    String memberMobile = "";
                    if(StringUtil.hasText(memberIdStr)){
                        Integer memberId = Integer.parseInt(memberIdStr);
                        memberMobile = StringUtil.trim(mobileMap.get(memberId));
                    }
                    map.put("memberMobile",memberMobile);
                    dataSet.add(map);
                });
            }
            result.setDataSet(dataSet);
        } catch (Exception e) {
            e.printStackTrace();
            result.setDataSet(null);
            result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
            result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
        }
        return result;
    }

    @Override
    public ResultVo getOwnerHousingApplicationById(Integer id) {
        ResultVo result = new ResultVo();
        try {
            //1.获取申请信息
            result = housesService.select(id,new HsOwnerHousingApplication());
            if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                //2.根据房源申请信息获取，房源所属人员memberId
                HsOwnerHousingApplication hsOwnerHousingApplication = (HsOwnerHousingApplication) result.getDataSet();
                //3.根据获取到的memberId获取人员手机号map
                Integer memberId = hsOwnerHousingApplication.getMemberId();
                //4.根据上面获取到的人员手机号map,对房源申请信息结果集进行重新封装，将人员手机号封装进去
                HsMember member = null;
                ResultVo memberResultVo = memberService.select(memberId, new HsMember());
                if(memberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    member = (HsMember) memberResultVo.getDataSet();
                }
                String memberMobile = "";
                if(member != null){
                    Integer mId = member.getId();
                    String memberMoble = member.getMemberMoble();
                    if(memberId.equals(mId)){
                        memberMobile = memberMoble;
                        //将房源申请信息hsOwnerHousingApplication转换为map，然后将人员手机号加入进map,再将返回结果集替换为增加了人员手机号的map
                        JSONObject jsonObject = JSON.parseObject(JSON.toJSONString(hsOwnerHousingApplication));
                        Map map = JSON.toJavaObject(jsonObject, Map.class);
                        map.put("memberMobile",memberMobile);
                        result.setDataSet(map);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            result.setDataSet(null);
            result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
            result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
        }
        return result;
    }
}
