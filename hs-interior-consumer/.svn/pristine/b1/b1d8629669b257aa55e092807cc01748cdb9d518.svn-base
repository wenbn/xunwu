package www.ucforward.com.controller.city;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.utils.StringUtil;
import www.ucforward.com.constants.RedisConstant;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.manager.CommonAdminManager;
import www.ucforward.com.utils.JsonUtil;
import www.ucforward.com.utils.RedisUtil;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import java.util.List;
import java.util.Map;

/**
 * @author wenbn
 * @version 1.0
 * @date 2018/8/27
 */
@Controller
public class CityInterController {

    private static Logger logger = LoggerFactory.getLogger(CityInterController.class); // 日志记录

    @Resource
    private CommonAdminManager commonManager;

    /**
     * 获取支持的城市信息
     * @return
     */
    @RequestMapping(value="/support/cities")
    @ResponseBody
    public String getCities(){
        ResultVo result = null;
        //查询缓存
        if(RedisUtil.existKey(RedisConstant.SYS_SUPPORT_CITIES_CACHE_KEY_KEY)) {
            List<Map<Object, Object>> citys = JsonUtil.parseJSON2List(RedisUtil.safeGet(RedisConstant.SYS_SUPPORT_CITIES_CACHE_KEY_KEY));
            result = ResultVo.success();
            result.setDataSet(citys);
            return JsonUtil.toJson(result);
        }
        Map<Object, Object> condition = Maps.newHashMap();
        try {
            condition.put("isDel",0);
            result = commonManager.getSupportCities(condition);
            if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                List<Map<Object,Object>> citys= (List<Map<Object, Object>>) result.getDataSet();
                if(citys!=null && citys.size()>0){
                    RedisUtil.safeSet( RedisConstant.SYS_SUPPORT_CITIES_CACHE_KEY_KEY, JsonUtil.toJson(citys), RedisConstant.SYS_SUPPORT_CITIES_CACHE_KEY_TIME);
                }
            }
        } catch (Exception e) {
            logger.error("CityController controller: getSupportCities Exception message:" + e.getMessage());
            System.out.println(e.getMessage());
            result.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            result.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        condition = null;
        return JsonUtil.toJson(result);
    }
}
