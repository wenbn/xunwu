package www.ucforward.com.serviceImpl;

import com.google.gson.Gson;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.utils.StringUtil;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.dao.*;
import www.ucforward.com.entity.*;
import www.ucforward.com.serviceInter.MemberService;
import www.ucforward.com.utils.EncryptionUtil;
import www.ucforward.com.utils.JsonUtil;
import www.ucforward.com.utils.RedisUtil;
import www.ucforward.com.utils.SystemNumberUtil;
import www.ucforward.com.vo.HeaderVo;
import www.ucforward.com.vo.PayLoadVo;
import www.ucforward.com.vo.ResultVo;
import java.util.*;

@Service("memberService")
public class MemberServiceImpl implements MemberService {

    private static Logger logger = LoggerFactory.getLogger(MemberServiceImpl.class); // 日志记录

    @Autowired
    private HsSysUserDao hsSysUserDao;
    @Autowired
    private HsSysPermissionDao hsSysPermissionDao;
    @Autowired
    private HsSysRoleDao hsSysRoleDao;
    @Autowired
    private HsSysRolePermissionDao hsSysRolePermissionDao;
    @Autowired
    private HsSysUserRoleDao hsSysUserRoleDao;
    @Autowired
    private HsMemberDao hsMemberDao;
    @Autowired
    private HsHousesBrowseHistoryDao hsHousesBrowseHistoryDao;
    @Autowired
    private HsMemberFavoriteDao hsMemberFavoriteDao;
    @Autowired
    private HsFeedbackDao hsFeedbackDao;
    @Autowired
    private HsMemberHousesSubscribeDao hsMemberHousesSubscribeDao;
    @Autowired
    private HsMemberHousingApplicationDao hsMemberHousingApplicationDao;

    @Override
    public ResultVo delete(Integer id, Object o) throws Exception {
        ResultVo vo = new ResultVo();
        int result = -1;
        try {
            if(o instanceof  HsMemberHousesSubscribe){
                result = hsMemberHousesSubscribeDao.deleteByPrimaryKey(id);
            }else if(o instanceof  HsMemberHousingApplication){
                result = hsMemberHousingApplicationDao.deleteByPrimaryKey(id);
            }

            if(result > 0){
                vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
                vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            }
        } catch (Exception e) {
            logger.error("MemberServiceImpl delete Exception message:"+e.getMessage());
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        } finally {
            return vo;
        }
    }

    @Override
    public ResultVo insert(Object o) throws Exception {
        ResultVo vo = new ResultVo();
        int result = -1;
        try {
            if(o instanceof  HsHousesBrowseHistory){
                result = hsHousesBrowseHistoryDao.insert((HsHousesBrowseHistory) o);
            }else if(o instanceof  HsMemberFavorite){
                result = hsMemberFavoriteDao.insert((HsMemberFavorite) o);
            }else if(o instanceof  HsFeedback){
                result = hsFeedbackDao.insert((HsFeedback) o);
            }else if(o instanceof  HsMemberHousesSubscribe){
                result = hsMemberHousesSubscribeDao.insert((HsMemberHousesSubscribe) o);
            }else if(o instanceof  HsMemberHousingApplication){
                result = hsMemberHousingApplicationDao.insert((HsMemberHousingApplication) o);
            }

            if(result > 0){
                vo.setDataSet(o);
                vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
                vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            }
        } catch (Exception e) {
            logger.error("MemberServiceImpl insert Exception message:"+e.getMessage());
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        } finally {
            return vo;
        }
    }

    @Override
    public ResultVo select(Integer id, Object o) throws Exception {
        ResultVo result = new ResultVo();
        try {
            if(o instanceof  HsHousesBrowseHistory){
                o = hsHousesBrowseHistoryDao.selectByPrimaryKey(id);
            }else if(o instanceof  HsMemberFavorite){
                o = hsMemberFavoriteDao.selectByPrimaryKey(id);
            }else if(o instanceof  HsFeedback){
                o = hsFeedbackDao.selectByPrimaryKey(id);
            }else if(o instanceof  HsMemberHousesSubscribe){
                o = hsMemberHousesSubscribeDao.selectByPrimaryKey(id);
            }else if(o instanceof  HsMemberHousingApplication){
                o = hsMemberHousingApplicationDao.selectByPrimaryKey(id);
            }
            result.setDataSet(o);
            result.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
            result.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
        } catch (Exception e) {
            e.printStackTrace();
            result.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            result.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }finally {
            return result;
        }
    }

    @Override
    public ResultVo selectList(Object o, Map<Object, Object> condition, int returnType) throws Exception {

        ResultVo vo = new ResultVo();
        Map<Object,Object> result = new HashMap<Object,Object>();
        try{
            if (o instanceof HsHousesBrowseHistory) {
                result = hsHousesBrowseHistoryDao.selectListByCondition(condition,returnType);
            }else if(o instanceof  HsMemberFavorite){
                result = hsMemberFavoriteDao.selectListByCondition(condition,returnType);
            }else if(o instanceof  HsMemberHousesSubscribe){
                result = hsMemberHousesSubscribeDao.selectListByCondition(condition,returnType);
            }else if(o instanceof  HsMemberHousingApplication){
                result = hsMemberHousingApplicationDao.selectListByCondition(condition,returnType);
            }
            vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
            vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            vo.setDataSet(result.get("data"));
            vo.setPageInfo(result.get("pageInfo"));
        }catch (Exception e){
            e.printStackTrace();
            logger.info("MemberServiceImpl selectList Exception message:"+e.getMessage());
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }finally {
            return vo;
        }
    }

    @Override
    public ResultVo update(Object o) throws Exception {
        ResultVo vo = new ResultVo();
        int result = -1;
        try {
            if (o instanceof  HsHousesBrowseHistory){
                result = hsHousesBrowseHistoryDao.updateByPrimaryKeySelective((HsHousesBrowseHistory) o);
            }else if(o instanceof  HsMemberFavorite){
                result = hsMemberFavoriteDao.updateByPrimaryKeySelective((HsMemberFavorite) o);
            }else if(o instanceof  HsFeedback){
                result = hsFeedbackDao.updateByPrimaryKeySelective((HsFeedback) o);
            }else if(o instanceof  HsMemberHousesSubscribe){
                result = hsMemberHousesSubscribeDao.updateByPrimaryKeySelective((HsMemberHousesSubscribe) o);
            }else if(o instanceof  HsMemberHousingApplication){
                result = hsMemberHousingApplicationDao.updateByPrimaryKeySelective((HsMemberHousingApplication) o);
            }

            if(result > 0){
                vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
                vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        } finally {
            return vo;
        }
    }

    /**
     *  根据条件查询用户信息
     * @param condition
     * @return
     */
    @Override
    public HsSysUser selectHsSysUserByCondition(Map<Object, Object> condition) {
        return hsSysUserDao.selectHsSysUserByCondition(condition);
    }

    /**
     *  根据条件查询用户权限
     * @param condition
     * @return
     */
    @Override
    public List<HsSysPermission> selectPermissionListByUser(Map<Object, Object> condition) {
        //查询用户对应的角色
        List<Map<Object,Object>> userRoles = hsSysRoleDao.selectRolesByUser(condition);
        if(userRoles==null){
            return null;
        }
        List<String> roleIds = new ArrayList<String>();
        for (Map<Object, Object> userRole : userRoles) {
            roleIds.add(StringUtil.trim(userRole.get("roleId")));
        }
        condition.put("roleIds",roleIds);
        List<HsSysPermission> permissions = hsSysPermissionDao.selectPermissionsByRoleIds(condition);
        return permissions;
    }

    /**
     * 登录
     * @param condition
     * @return
     */
    @Override
    public ResultVo login(Map<Object, Object> condition) throws Exception{
        ResultVo vo = new ResultVo();
        int language = (int) condition.get("language");
        String memberMobile = StringUtil.trim(condition.get("memberMobile"));
        Map<Object,Object> queryFilter = new HashMap<Object,Object>();
        queryFilter.put("memberMobile",memberMobile);
        HsMember member = hsMemberDao.selectMemberByCondition(queryFilter);
        if(member==null){
            member = new HsMember();
            member.setMemberCode(SystemNumberUtil.createCode(ResultConstant.BUS_MEMBER_CODE_VALUE));
            member.setMemberMobile(memberMobile);
            member.setLanguageVersion(language);
            member.setCreateTime(new Date());
            int state = hsMemberDao.addMember(member);
            if(state<=0){
                vo.setResult(-1);
                vo.setMessage("新增会员失败");
                return vo;
            }
        }
        if(member.getState() == 0){
            vo.setResult(-1);
            vo.setMessage("会员已禁用，请联系管理员");
            return vo;
        }
        //生成token值
        PayLoadVo payLoadVo = new PayLoadVo();
        HeaderVo headerVo = new HeaderVo();
        payLoadVo.setUserId(String.valueOf(member.getId()));
        payLoadVo.setIss(member.getMemberCode());
        payLoadVo.setExp(new Date());
        String content = EncryptionUtil.getBase64(JsonUtil.toJson(headerVo)).replaceAll("\r|\n", "")+"."+EncryptionUtil.getBase64(new Gson().toJson(payLoadVo)).replaceAll("\r|\n", "");
        String signature = EncryptionUtil.getSHA256StrJava(ResultConstant.BUS_TAG_TOKEN+content);
        vo.setToken(content+"."+EncryptionUtil.getBase64(signature).replaceAll("\r|\n", ""));
        //请求成功
        vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
        vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
        //保存至redis
        RedisUtil.safeSet(member.getMemberCode(),signature,1800);
        return vo;
    }

    @Override
    public List<Map<Object, Object>> allotUsableUsers(Map<Object, Object> condition) {
        return null;
    }
}
