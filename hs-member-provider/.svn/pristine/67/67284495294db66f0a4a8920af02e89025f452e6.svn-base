package www.ucforward.com.serviceImpl;

import com.google.gson.Gson;
import org.omg.CORBA.OBJ_ADAPTER;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.utils.StringUtil;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.dao.*;
import www.ucforward.com.entity.*;
import www.ucforward.com.serviceInter.MemberService;
import www.ucforward.com.utils.EncryptionUtil;
import www.ucforward.com.utils.JsonUtil;
import www.ucforward.com.utils.RedisUtil;
import www.ucforward.com.utils.SystemNumberUtil;
import www.ucforward.com.vo.HeaderVo;
import www.ucforward.com.vo.PayLoadVo;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import java.util.*;

@Service("memberService")
public class MemberServiceImpl implements MemberService {

    @Autowired
    private HsSysUserDao hsSysUserDao;
    @Autowired
    private HsSysPermissionDao hsSysPermissionDao;
    @Autowired
    private HsSysRoleDao hsSysRoleDao;
    @Autowired
    private HsSysRolePermissionDao hsSysRolePermissionDao;
    @Autowired
    private HsSysUserRoleDao hsSysUserRoleDao;
    @Autowired
    private HsMemberDao hsMemberDao;
    @Autowired
    private HsSystemUserOrderTasksDao hsSystemUserOrderTasksDao;
    @Autowired
    private HsSystemUserOrderTasksLogDao hsSystemUserOrderTasksLogDao;

    @Override
    public ResultVo delete(Integer id, Object o) throws Exception {
        ResultVo vo = new ResultVo();
        int result = -1;//
        try{
            if (o instanceof HsSysUser) {//
                result = hsSysUserDao.deleteByPrimaryKey(id);
            } else if (o instanceof HsSysPermission) {
                result = hsSysPermissionDao.deleteByPrimaryKey(id);
            } else if (o instanceof HsMember) {
                result = hsMemberDao.deleteByPrimaryKey(id);
            }
            if(result>0){//操作成功
                vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
                vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            }else{
                vo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                vo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
            }
        }catch (Exception e){
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }finally {
            return vo;
        }
    }

    @Override
    public ResultVo insert(Object o) throws Exception {
        ResultVo vo = new ResultVo();
        int result = -1;//
        try{
            if (o instanceof HsSysUser) {//
                result = hsSysUserDao.insert((HsSysUser) o);
            } else if (o instanceof HsSysPermission) {
                result = hsSysPermissionDao.insert((HsSysPermission) o);
            } else if (o instanceof HsMember) {
                result = hsMemberDao.insert((HsMember) o);
            }
            if(result>0){//操作成功
                vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
                vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            }else{
                vo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                vo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
            }
        }catch (Exception e){
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }finally {
            return vo;
        }
    }

    @Override
    public ResultVo select(Integer id, Object o) throws Exception {
        ResultVo vo = new ResultVo();
        Object obj = null;
        try{
            if (o instanceof HsSysUser) {//
                obj = hsSysUserDao.selectByPrimaryKey(id);
            } else if (o instanceof HsSysPermission) {
                obj = hsSysPermissionDao.selectByPrimaryKey(id);
            } else if (o instanceof HsMember) {
                obj = hsMemberDao.selectByPrimaryKey(id);
            }
            vo.setDataSet(obj);
            vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
            vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
        }catch (Exception e){
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }finally {
            return vo;
        }
    }

    @Override
    public ResultVo selectList(Object o, Map<Object, Object> condition, int returnType) throws Exception {
        ResultVo vo = new ResultVo();
        List<Object> data = null;
        Map<Object,Object> result = new HashMap<Object,Object>();
        try{
//            if (o instanceof HsSysUser) {
//                obj = hsSysUserDao.selectListByCondition(condition,returnType);
//            } else if (o instanceof HsSysPermission) {
//                obj = hsSysPermissionDao.selectListByCondition(condition,returnType);
//            } else if (o instanceof HsMember) {
//                obj = hsMemberDao.selectListByCondition(condition,returnType);
//            }
            vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
            vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            vo.setDataSet(result.get("data"));
            vo.setPageInfo(result.get("pageInfo"));
        }catch (Exception e){
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }finally {
            return vo;
        }
    }

    @Override
    public ResultVo update(Object o) throws Exception {
        ResultVo vo = new ResultVo();
        int result = -1;//
        try{
            if (o instanceof HsSysUser) {//
                result = hsSysUserDao.updateByPrimaryKeySelective((HsSysUser) o);
            } else if (o instanceof HsSysPermission) {
                result = hsSysPermissionDao.updateByPrimaryKeySelective((HsSysPermission) o);
            } else if (o instanceof HsMember) {
                result = hsMemberDao.updateByPrimaryKeySelective((HsMember) o);
            }
            if(result>0){//操作成功
                vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
                vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            }else{
                vo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                vo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
            }
        }catch (Exception e){
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }finally {
            return vo;
        }
    }

    /**
     *
     * @param o
     * @param condition data---》需要插入的数据实体类，
     * @return
     */
    @Override
    public ResultVo batchInsert(Object o, Map<Object, Object> condition) {
        ResultVo vo = new ResultVo();
        int result = -1;//
        try{
            if (o instanceof HsSysUser) {//
                List<HsSysUser> data = (List<HsSysUser>) condition.get("data");
                //result = hsSystemOrderPoolDao.batchInsert(data);
            } else if (o instanceof HsSystemOrderPoolLog) {
                //List<HsSystemOrderPoolLog> data = (List<HsSystemOrderPoolLog>) condition.get("data");
                //result = hsSysPermissionDao.batchInsert(data);
            } else if (o instanceof HsSystemUserOrderTasks) {
                List<HsSystemUserOrderTasks> data = (List<HsSystemUserOrderTasks>) condition.get("data");
                List<HsSystemUserOrderTasksLog> LogData = (List<HsSystemUserOrderTasksLog>) condition.get("LogData");
                result = hsSystemUserOrderTasksDao.batchInsert(data);
                if(result>0){
                    for (HsSystemUserOrderTasks task : data) {
                        Integer id = task.getId();//任务id
                        Integer poolId = task.getPoolId();//任务id
                        for (HsSystemUserOrderTasksLog log : LogData) {
                            if(log.getPoolId()==poolId){

                            }
                        }

                    }
                }
            }



            if(result>0){//操作成功
                vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
                vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
            }else{
                vo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                vo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
            }
        }catch (Exception e){
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }finally {
            return vo;
        }
    }

    /**
     *  根据条件查询用户信息
     * @param condition
     * @return
     */
    @Override
    public HsSysUser selectHsSysUserByCondition(Map<Object, Object> condition) {
        return hsSysUserDao.selectHsSysUserByCondition(condition);
    }

    /**
     *  根据条件查询用户权限
     * @param condition
     * @return
     */
    @Override
    public List<HsSysPermission> selectPermissionListByUser(Map<Object, Object> condition) {
        //查询用户对应的角色
        List<Map<Object,Object>> userRoles = hsSysRoleDao.selectRolesByUser(condition);
        if(userRoles==null){
            return null;
        }
        List<String> roleIds = new ArrayList<String>();
        for (Map<Object, Object> userRole : userRoles) {
            roleIds.add(StringUtil.trim(userRole.get("roleId")));
        }
        condition.put("roleIds",roleIds);
        List<HsSysPermission> permissions = hsSysPermissionDao.selectPermissionsByRoleIds(condition);
        return permissions;
    }

    /**
     * 登录
     * @param condition
     * @return
     */
    @Override
    public ResultVo login(Map<Object, Object> condition) throws Exception{
        ResultVo vo = new ResultVo();
        int language = (int) condition.get("language");
        String memberMobile = StringUtil.trim(condition.get("memberMobile"));
        Map<Object,Object> queryFilter = new HashMap<Object,Object>();
        queryFilter.put("memberMobile",memberMobile);
        HsMember member = hsMemberDao.selectMemberByCondition(queryFilter);
        if(member==null){
            member = new HsMember();
            member.setMemberCode(SystemNumberUtil.createCode(ResultConstant.BUS_MEMBER_CODE_VALUE));
            member.setMemberMobile(memberMobile);
            member.setLanguageVersion(language);
            member.setCreateTime(new Date());
            int state = hsMemberDao.addMember(member);
            if(state<=0){
                vo.setResult(-1);
                vo.setMessage("新增会员失败");
                return vo;
            }
        }
        if(member.getState() == 0){
            vo.setResult(-1);
            vo.setMessage("会员已禁用，请联系管理员");
            return vo;
        }
        //生成token值
        PayLoadVo payLoadVo = new PayLoadVo();
        HeaderVo headerVo = new HeaderVo();
        payLoadVo.setUserId(String.valueOf(member.getId()));
        payLoadVo.setIss(member.getMemberCode());
        payLoadVo.setExp(new Date());
        String content = EncryptionUtil.getBase64(JsonUtil.toJson(headerVo)).replaceAll("\r|\n", "")+"."+EncryptionUtil.getBase64(new Gson().toJson(payLoadVo)).replaceAll("\r|\n", "");
        String signature = EncryptionUtil.getSHA256StrJava(ResultConstant.BUS_TAG_TOKEN+content);
        vo.setToken(content+"."+EncryptionUtil.getBase64(signature).replaceAll("\r|\n", ""));
        //请求成功
        vo.setMessage(ResultConstant.SYS_REQUIRED_SUCCESS_VALUE);
        vo.setResult(ResultConstant.SYS_REQUIRED_SUCCESS);
        //保存至redis
        RedisUtil.safeSet(member.getMemberCode(),signature,1800);
        return vo;
    }


    //计算可用的业务员
    @Override
    public List<Map<Object, Object>> allotUsableUsers(Map<Object, Object> condition) {
        if(condition==null || condition.size()==0){
            return null;
        }
        //查询对应角色的userIds
        List<Map<Object,Object>> users = hsSysUserDao.loadUserRoles(condition);
        if(users==null){
            return null;
        }
        //获取最新一次位置
//        List<Integer> userIds =  new ArrayList<Integer>();
//        for (Map<Object, Object> user : users) {
//            userIds.add(StringUtil.getAsInt(StringUtil.trim(user.get("userId"))));
//        }
        double longitude = 114.057865;
        double latitude = 22.543096;
        for (Map<Object, Object> user : users) {
            int rd=(int)(Math.random()>0.5?1:0);
            double x=(double)((Math.random()*9+1)*100000)/10000000;
            double y=(double)((Math.random()*9+1)*100000)/10000000;
            if(rd>0){
                user.put("longitude",longitude+x);
                user.put("latitude",latitude+y);
            }else{
                user.put("longitude",longitude-x);
                user.put("latitude",latitude-y);
            }
        }
        return users;
    }
}
