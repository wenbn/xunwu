package www.ucforward.com.manager.impl;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.utils.StringUtil;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.entity.HsBooth;
import www.ucforward.com.entity.HsBoothChannelRel;
import www.ucforward.com.entity.HsChannel;
import www.ucforward.com.manager.ICommonManager;
import www.ucforward.com.serviceInter.CommonService;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @author wenbn
 * @version 1.0
 * @date 2018/8/20
 */
@Service
public class ICommonManagerImpl implements ICommonManager {

    @Resource
    private CommonService commonService;

    // 日志记录器
    private static Logger logger = LoggerFactory.getLogger(ICommonManagerImpl.class);

    /**
     * 获取频道列表
     * @param condition
     * @return
     */
    @Override
    public ResultVo getChannelList(Map<Object, Object> condition) {
        ResultVo vo = null;
        //自定义查询列名
        List<String> queryColumn = new ArrayList<>();
        queryColumn.add("ID channelId");//主键ID
        queryColumn.add("LANGUAGE_VERSION languageVersion");//语言版本（0：中文，1：英文）默认为0
        queryColumn.add("CHANNEL_NAME channelName");//频道名称
        queryColumn.add("CHANNEL_ALIAS_NAME channelAliasName");//频道别名唯一
        queryColumn.add("CHANNEL_DESC channelDesc");//频道描述
        queryColumn.add("CHANNEL_TYPE channelType");//频道类型（1：PC网站，2：触屏端，3：App）
        queryColumn.add("CHANNEL_STATE channelState");//频道的状态（0：不启用，1：启用）
        queryColumn.add("CHANNEL_SORT channelSort");//排序
        queryColumn.add("IS_DEL isDel");//是否删除0:不删除，1：删除
        queryColumn.add("CREATE_TIME createTime");//创建时间
        condition.put("queryColumn",queryColumn);
        try {
            vo = commonService.selectCustomColumnNamesList(HsChannel.class,condition);
        } catch (Exception e) {
            logger.warn("Remote call to CommonService fails"+e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 获取展位列表
     * @param condition
     * @return
     */
    @Override
    public ResultVo getBoothList(Map<Object, Object> condition) {
        ResultVo vo = null;
        //自定义查询列名
        List<String> queryColumn = new ArrayList<>();
        queryColumn.add("ID boothId");//主键ID
        queryColumn.add("LANGUAGE_VERSION languageVersion");//语言版本（0：中文，1：英文）默认为0
        queryColumn.add("BOOTH_NAME boothName");//展位的名称
        queryColumn.add("BOOTH_ALIAS_NAME boothAliasName");//展位别名
        queryColumn.add("BOOTH_DESC boothDesc");//展位描述
        queryColumn.add("BOOTH_TYPE boothType");//展位类型（1：广告，2：买家出租问题 ，3：买家出售问题，4：卖家出租问题 ，5：卖家出售问题，6：友情链接，7：出租，8：出售，9：新楼盘）
        queryColumn.add("BOOTH_STATE boothState");//展位状态（0：启用，1：禁用）
        queryColumn.add("BOOTH_SORT boothSort");//排序
        queryColumn.add("IS_DEL isDel");//是否删除0:不删除，1：删除
        queryColumn.add("DATA_SIZE dataSize");//该栏位限制的数据条数0标识不限制
        queryColumn.add("BOOTH_EXCLUSIVE boothExclusive");//该展位的专属(1:PC, 2:TC, 3:APP)
        queryColumn.add("CREATE_TIME createTime");//创建时间
        condition.put("queryColumn",queryColumn);
        try {
            vo = commonService.selectCustomColumnNamesList(HsBooth.class,condition);
        } catch (Exception e) {
            logger.warn("Remote call to CommonService fails"+e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 获取展位详情
     * @param id
     * @return
     */
    @Override
    public ResultVo getBoothDetail(Integer id) {
        ResultVo vo = null;
        try {
            vo = commonService.select(id,new HsBooth());
        } catch (Exception e) {
            logger.warn("Remote call to CommonService fails"+e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 获取该频道下已经绑定的展位数据
     * @param channelId 频道ID
     * @return
     */
    @Override
    public ResultVo getChannelBindData(Integer channelId) {
        ResultVo vo = null;
        Map<Object,Object> condition = Maps.newHashMap();
        try {
            condition.put("isDel",0);//未删除
            condition.put("channelId",channelId);//频道ID
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            queryColumn.add("ID boothChannelRelId");//资源和频道的关联表ID
            queryColumn.add("CHANNEL_ID channelId");//频道ID
            queryColumn.add("BOOTH_ID boothId");//展位ID
            queryColumn.add("SORT sort");//展位ID
            condition.put("queryColumn",queryColumn);
            vo = commonService.selectCustomColumnNamesList(HsBoothChannelRel.class,condition);
            if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {//查询成功
                return vo;
            }
            List<Map<Object,Object>> boothChannelRelList = (List<Map<Object, Object>>) vo.getDataSet();
            if(boothChannelRelList== null || boothChannelRelList.size()==0) return vo;//如果数据为空直接返回
            List<Integer> boothIds = Lists.newArrayList();//保存展位ID
            boothChannelRelList.forEach((boothChannelRel)->{
                boothIds.add(StringUtil.getAsInt(StringUtil.trim(boothChannelRel.get("boothId"))));
            });
            condition.clear();
            queryColumn.clear();
            queryColumn.add("ID boothId");//展位ID
            queryColumn.add("BOOTH_NAME boothName");//展位的名称
            queryColumn.add("BOOTH_ALIAS_NAME boothAliasName");//展位别名
            queryColumn.add("BOOTH_DESC boothDesc");//展位描述
            queryColumn.add("BOOTH_TYPE boothType");//展位类型（1：广告，2：买家出租问题 ，3：买家出售问题，4：卖家出租问题 ，5：卖家出售问题，6：友情链接，7：出租，8：出售，9：新楼盘）
            queryColumn.add("BOOTH_EXCLUSIVE boothExclusive");//该展位的专属(1:PC, 2:TC, 3:APP)
            condition.put("queryColumn",queryColumn);
            condition.put("boothState",0);//展位状态（0：启用，1：禁用）
            condition.put("isDel",0);//是否删除0:未删除，1：删除
            condition.put("boothIds",boothIds);//展位Ids
            vo = commonService.selectCustomColumnNamesList(HsBooth.class,condition);
            if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {//查询成功
                return vo;
            }
            List<Map<Object,Object>> sortBoothList = Lists.newArrayList();
            List<Map<Object,Object>> boothList = (List<Map<Object, Object>>) vo.getDataSet();
            if(boothList==null || boothList.size()==0){//数据展位数据为空时
                return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
            }
            for (Integer boothId : boothIds) {
                for (Map<Object, Object> booth : boothList) {
                    if(boothId == StringUtil.getAsInt(StringUtil.trim(booth.get("boothId")))){
                        sortBoothList.add(booth);
                        break;
                    }
                }
            }
            vo.setDataSet(sortBoothList);
            boothChannelRelList =null;
            boothList =null;
            sortBoothList =null;
        } catch (Exception e) {
            logger.warn("Remote call to CommonService fails"+e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 获取该频道下未绑定的展位数据
     * @param channelId 频道ID
     * @param channelType 频道类型
     * @return
     */
    @Override
    public ResultVo getChannelUnBindData(Integer channelId,Integer channelType) {
        ResultVo vo = null;
        Map<Object,Object> condition = Maps.newHashMap();
        try {
            condition.put("isDel",0);//未删除
            condition.put("channelId",channelId);//频道ID
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            queryColumn.add("ID boothChannelRelId");//资源和频道的关联表ID
            queryColumn.add("CHANNEL_ID channelId");//频道ID
            queryColumn.add("BOOTH_ID boothId");//展位ID
            queryColumn.add("SORT sort");//展位ID
            condition.put("queryColumn",queryColumn);
            vo = commonService.selectCustomColumnNamesList(HsBoothChannelRel.class,condition);
            if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {//查询成功
                return vo;
            }
            List<Map<Object,Object>> boothChannelRelList = (List<Map<Object, Object>>) vo.getDataSet();
            if(boothChannelRelList== null || boothChannelRelList.size()==0) return vo;//如果数据为空直接返回
            List<Integer> boothIds = Lists.newArrayList();//保存展位ID
            boothChannelRelList.forEach((boothChannelRel)->{
                boothIds.add(StringUtil.getAsInt(StringUtil.trim(boothChannelRel.get("boothId"))));
            });
            condition.clear();
            queryColumn.clear();
            queryColumn.add("ID boothId");//展位ID
            queryColumn.add("BOOTH_NAME boothName");//展位的名称
            queryColumn.add("BOOTH_ALIAS_NAME boothAliasName");//展位别名
            queryColumn.add("BOOTH_DESC boothDesc");//展位描述
            queryColumn.add("BOOTH_TYPE boothType");//展位类型（1：广告，2：买家出租问题 ，3：买家出售问题，4：卖家出租问题 ，5：卖家出售问题，6：友情链接，7：出租，8：出售，9：新楼盘）
            queryColumn.add("BOOTH_EXCLUSIVE boothExclusive");//该展位的专属(1:PC, 2:TC, 3:APP)
            condition.put("queryColumn",queryColumn);
            condition.put("boothState",0);//展位状态（0：启用，1：禁用）
            condition.put("isDel",0);//是否删除0:未删除，1：删除
            condition.put("boothExclusive",channelType);//频道类型（1：PC网站，2：触屏端，3：App）
            condition.put("noInbindboothIds",boothIds);//查询未绑定的展位Ids
            vo = commonService.selectCustomColumnNamesList(HsBooth.class,condition);
            boothChannelRelList =null;
        } catch (Exception e) {
            logger.warn("Remote call to CommonService fails"+e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 绑定展位数据
     * @param channelId
     * @param boothIdsList
     * @return
     */
    @Override
    public ResultVo bindingChannelData(Integer channelId, List<Integer> boothIdsList) {
        ResultVo vo = null;
        Map<Object,Object> condition = Maps.newHashMap();
        try {
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            //查询该频道下已绑定的数据
            condition.put("isDel",0);//未删除
            condition.put("channelId",channelId);//频道ID
            queryColumn.add("ID boothChannelRelId");//资源和频道的关联表ID
            queryColumn.add("CHANNEL_ID channelId");//频道ID
            queryColumn.add("BOOTH_ID boothId");//展位ID
            queryColumn.add("SORT sort");//展位ID
            condition.put("queryColumn",queryColumn);
            vo = commonService.selectCustomColumnNamesList(HsBoothChannelRel.class,condition);
            if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {//查询成功
                return vo;
            }
            List<Map<Object,Object>> bindingBooths = (List<Map<Object, Object>>) vo.getDataSet();
            int maxSort = 0;
            if(bindingBooths!=null && bindingBooths.size()>0){
                for (Map<Object, Object> booth : bindingBooths) {//遍历已绑定的展位数,将已绑定的Id过滤掉
                    Integer boothId = StringUtil.getAsInt(StringUtil.trim(booth.get("boothId")));
                    int sort = StringUtil.getAsInt(StringUtil.trim(booth.get("sort")));
                    if(sort>maxSort){//保存最大的排序数
                        maxSort = sort;
                    }
                    if(boothIdsList.contains(boothId)){//如果包含已绑定的展位
                        boothIdsList.remove(boothId);
                    }
                }
            }

            //绑定过滤掉的展位数
            if(boothIdsList==null || boothIdsList.size()==0){//如果要绑定的展位都已存在,则直接提示绑定成功
                return ResultVo.success();
            }
            int length = boothIdsList.size();
            List<HsBoothChannelRel> boothChannelRels = Lists.newArrayListWithCapacity(length);
            HsBoothChannelRel boothChannelRel = null;
            Date date = new Date();
            for (int i =0 ;i < length ; i++) {
                boothChannelRel = new HsBoothChannelRel();
                boothChannelRel.setChannelId(channelId);
                boothChannelRel.setBoothId(boothIdsList.get(i));
                boothChannelRel.setSort(maxSort+i+1);
                boothChannelRel.setIsDel(0);
                boothChannelRel.setCreateTime(date);
                boothChannelRel.setUpdateTime(date);
                boothChannelRel.setBid(57);
                boothChannelRels.add(boothChannelRel);
            }
            vo = commonService.batchInsert(HsBoothChannelRel.class,boothChannelRels);
        } catch (Exception e) {
            logger.warn("Remote call to CommonService fails"+e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }
}
