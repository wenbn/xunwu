package www.ucforward.com.controller.internal;

import com.google.common.collect.Maps;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.subject.Subject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.utils.DateUtils;
import org.utils.StringUtil;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.controller.house.HousesController;
import www.ucforward.com.entity.ActiveUser;
import www.ucforward.com.manager.IOrderManager;
import www.ucforward.com.utils.JsonUtil;
import www.ucforward.com.utils.RequestUtil;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.Date;
import java.util.Map;

/**
 * @author wenbn
 * @version 1.0
 * @date 2018/8/30
 */
@Controller
@ResponseBody
public class InternalController {


    // 日志记录器
    private static Logger logger = LoggerFactory.getLogger(InternalController.class);

    @Resource
    private IOrderManager orderManager;

    /**
     * 1。内勤已确认正式合同
     * @param request
     * @return
     */
    @PostMapping(value="/confirmed/online/contract")
    public String confirmedOnlineContract(HttpServletRequest request){
        ResultVo vo =null;
        try {
            Map map = RequestUtil.getParameterMap(request);
            String orderCode = StringUtil.trim(map.get("orderCode"));//订单编码
            if(!StringUtil.hasText(orderCode)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            Map<Object ,Object> condition = Maps.newHashMap();
            condition.put("orderCode",orderCode);
            Subject subject = SecurityUtils.getSubject();
            ActiveUser user = (ActiveUser) subject.getPrincipal();
            condition.put("updateId",user.getUserid());//保存修改人ID
            vo = orderManager.confirmedOnlineContract(condition);
        } catch (Exception e) {
            logger.error("FinanceController confirmedOnlineContract: offlineOrderPay Exception message:" + e.getMessage());
            vo = ResultVo.error(
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE
            );
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 2。内勤分配业务员派线下合同单
     * @param request
     * @return
     */
    @PostMapping(value="/send/offline/contract")
    public String sendOfflineContract(HttpServletRequest request){
        ResultVo vo =null;
        try {
            String orderCode = request.getParameter("orderCode");//订单编码
            String appointmentDoorTime = request.getParameter("appointmentDoorTime");//见面时间
            String appointmentMeetPlace = request.getParameter("appointmentMeetPlace");//见面地点
            if(!StringUtil.hasText(orderCode) || !StringUtil.hasText(appointmentDoorTime) || !StringUtil.hasText(appointmentMeetPlace)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            Map<Object ,Object> condition = Maps.newHashMap();
            condition.put("orderCode",orderCode);
            Subject subject = SecurityUtils.getSubject();
            ActiveUser user = (ActiveUser) subject.getPrincipal();
            condition.put("updateId",user.getUserid());//保存修改人ID

            Date _appointmentDoorTime = DateUtils.reverse2Date(appointmentDoorTime);
            long close = 120*60*1000;//2个小时
            Date appointmentDoorTimeDate = new Date(_appointmentDoorTime.getTime() - close);//见面时间
            Date nowDate = new Date();//当前时间
            if(appointmentDoorTimeDate.getTime()<nowDate.getTime()){
                return JsonUtil.toJson(ResultVo.error(
                        ResultConstant.SYS_REQUIRED_FAILURE,
                        "见面时间必须大于当前时间+2小时"
                ));
            }
            condition.put("appointmentDoorTime", _appointmentDoorTime);//见面时间
            condition.put("appointmentMeetPlace", appointmentMeetPlace);//见面地点
            vo = orderManager.sendOfflineContract(condition);
        } catch (Exception e) {
            logger.error("FinanceController confirmedOnlineContract: sendOfflineContract Exception message:" + e.getMessage());
            vo = ResultVo.error(
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE
            );
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 3。内勤确认已签署合同
     * @param request
     * @return
     */
    @PostMapping(value="/confirm/signed/contract")
    public String confirmSignedContract(HttpServletRequest request){
        ResultVo vo =null;
        try {
            String orderCode = request.getParameter("orderCode");//订单编码
            if(!StringUtil.hasText(orderCode)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            Map<Object ,Object> condition = Maps.newHashMap();
            condition.put("orderCode",orderCode);
            Subject subject = SecurityUtils.getSubject();
            ActiveUser user = (ActiveUser) subject.getPrincipal();
            condition.put("updateId",user.getUserid());//保存修改人ID
            vo = orderManager.confirmSignedContract(condition);
        } catch (Exception e) {
            logger.error("FinanceController confirmedOnlineContract: sendOfflineContract Exception message:" + e.getMessage());
            vo = ResultVo.error(
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE
            );
        }
        return JsonUtil.toJson(vo);
    }


    /**
     * 4。确认Ejari注册完成
     * @param request
     * @return
     */
    @PostMapping(value="/confirm/ejari/register")
    public String confirmEjariRegister(HttpServletRequest request){
        ResultVo vo =null;
        try {
            String orderCode = request.getParameter("orderCode");//订单编码
            if(!StringUtil.hasText(orderCode)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            Map<Object ,Object> condition = Maps.newHashMap();
            condition.put("orderCode",orderCode);
            Subject subject = SecurityUtils.getSubject();
            ActiveUser user = (ActiveUser) subject.getPrincipal();
            condition.put("updateId",user.getUserid());//保存修改人ID
            vo = orderManager.confirmEjariRegister(condition);
        } catch (Exception e) {
            logger.error("FinanceController confirmedOnlineContract: sendOfflineContract Exception message:" + e.getMessage());
            vo = ResultVo.error(
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE
            );
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 4。卖家NOC / 买家贷款
     * @param request
     * @return
     */
    @PostMapping(value="/noc/or/loans")
    public String nocOrLoans(HttpServletRequest request){
        ResultVo vo =null;
        try {
            String orderCode = request.getParameter("orderCode");//订单编码
            if(!StringUtil.hasText(orderCode)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            Map<Object ,Object> condition = Maps.newHashMap();
            condition.put("orderCode",orderCode);
            Subject subject = SecurityUtils.getSubject();
            ActiveUser user = (ActiveUser) subject.getPrincipal();
            condition.put("updateId",user.getUserid());//保存修改人ID
            vo = orderManager.nocOrLoans(condition);
        } catch (Exception e) {
            logger.error("FinanceController confirmedOnlineContract: sendOfflineContract Exception message:" + e.getMessage());
            vo = ResultVo.error(
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE
            );
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 5。完成产权变更
     * @param request
     * @return
     */
    @PostMapping(value="/registration/alteration")
    public String registrationAlteration(HttpServletRequest request){
        ResultVo vo =null;
        try {
            String orderCode = request.getParameter("orderCode");//订单编码
            if(!StringUtil.hasText(orderCode)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            Map<Object ,Object> condition = Maps.newHashMap();
            condition.put("orderCode",orderCode);
            Subject subject = SecurityUtils.getSubject();
            ActiveUser user = (ActiveUser) subject.getPrincipal();
            condition.put("updateId",user.getUserid());//保存修改人ID
            vo = orderManager.registrationAlteration(condition);//完成产权变更
        } catch (Exception e) {
            logger.error("FinanceController registrationAlteration  Exception message:" + e.getMessage());
            vo = ResultVo.error(
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE
            );
        }
        return JsonUtil.toJson(vo);
    }

    /**
     * 业主或买家拒绝签订正式合同
     * @param request
     * @return
     */
    @PostMapping(value="/reject/formal/contract")
    public String rejectFormalContract(HttpServletRequest request){
        ResultVo vo =null;
        try {
            String orderCode = request.getParameter("orderCode");//订单编码
            String identityType = request.getParameter("identityType");//身份类型 0：业主 1：买家
            if(!StringUtil.hasText(orderCode) || !StringUtil.hasText(identityType)){
                vo = ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(vo);
            }
            Map<Object ,Object> condition = Maps.newHashMap();
            condition.put("orderCode",orderCode);
            Subject subject = SecurityUtils.getSubject();
            ActiveUser user = (ActiveUser) subject.getPrincipal();
            condition.put("updateId",user.getUserid());//保存修改人ID
            condition.put("identityType",identityType);//身份类型 0：业主 1：买家
            vo = orderManager.rejectFormalContract(condition);//完成产权变更
        } catch (Exception e) {
            logger.error("FinanceController registrationAlteration  Exception message:" + e.getMessage());
            vo = ResultVo.error(
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,
                    ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE
            );
        }
        return JsonUtil.toJson(vo);
    }

}
