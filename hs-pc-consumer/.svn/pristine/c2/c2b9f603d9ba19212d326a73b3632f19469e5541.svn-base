package www.ucforward.com.controller.operation;

import com.google.common.collect.Maps;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.utils.StringUtil;
import www.ucforward.com.constants.AppRquestParamsConstant;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.entity.HsChannel;
import www.ucforward.com.manager.ICommonManager;
import www.ucforward.com.utils.JsonUtil;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 频道管理类
 * @author wenbn
 * @version 1.0
 * @date 2018/8/20
 */
@Controller
@ResponseBody
public class ChannelController {

    // 日志记录器
    private static Logger logger = LoggerFactory.getLogger(ChannelController.class);

    @Resource
    private ICommonManager commonManager;

    /**
     * 获取频道列表
     * @return
     */
    @RequestMapping(value="/channel/list",method = RequestMethod.POST)
    public String getChannelList(HttpServletRequest request) throws Exception {
        ResultVo vo = null;
        int pageIndex = StringUtil.getAsInt(request.getParameter("pageIndex"),0); //当前页
        int languageVersion = StringUtil.getAsInt(request.getParameter("languageVersion"),0); //语言版本
        Map<Object,Object> condition = Maps.newHashMap();
        condition.put("languageVersion",languageVersion);
        condition.put("pageIndex",pageIndex);
        condition.put("pageSize", AppRquestParamsConstant.APP_PAGE_SIZE); //页显示条数
        vo = commonManager.getChannelList(condition);
        return JsonUtil.toJson(vo);
    }

    /**
     * 获取该频道下已经绑定的展位数据
     * @return
     */
    @RequestMapping(value="/load/channel/bind/data/{channelId}",method = RequestMethod.POST)
    public String getChannelBindData(@PathVariable Integer channelId) throws Exception {
        //通过频道ID获取已绑定的展位数据
        ResultVo vo = commonManager.getChannelBindData(channelId);
        return JsonUtil.toJson(vo);
    }

    /**
     * 获取未绑定的展位数据
     * @return
     */
    @RequestMapping(value="/load/channel/unbind/data/{channelId}/{channelType}",method = RequestMethod.POST)
    public String getChannelUnBindData(@PathVariable Integer channelId,@PathVariable Integer channelType) throws Exception {
        //通过频道ID获取未绑定的展位数据
        ResultVo vo = commonManager.getChannelUnBindData(channelId,channelType);
        return JsonUtil.toJson(vo);
    }

    /**
     * 频道绑定展位
     * @return
     */
    @RequestMapping(value="/channel/binding/data/{channelId}/{boothIds}",method = RequestMethod.POST)
    public String bindingChannelData(@PathVariable Integer channelId,@PathVariable String boothIds) throws Exception {
        ResultVo vo = null;
        if(channelId<=0){
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE));
        }
        if(!StringUtil.hasText(boothIds)){//绑定的数据为空时直接返回绑定失败
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,ResultConstant.SYS_REQUIRED_FAILURE_VALUE));
        }
        List<Integer> boothIdsList =Arrays.asList(boothIds.split(","))
                .stream().map(s -> Integer.parseInt(s.trim()))
                .collect(Collectors.toList());
        //绑定展位数据
        vo = commonManager.bindingChannelData(channelId,boothIdsList);
        return JsonUtil.toJson(vo);
    }

    /**
     * 获取频道详情
     * @return
     */
    @RequestMapping(value="/channel/detail/{channelId}",method = RequestMethod.POST)
    public String getChannelDetail(@PathVariable Integer channelId) throws Exception {
        ResultVo vo = commonManager.getBoothDetail(channelId);
        return JsonUtil.toJson(vo);
    }

    /**
     * 新增频道
     * @return
     */
    @RequestMapping(value="/channel/add",method = RequestMethod.POST)
    public String addChannel(HsChannel channel) throws Exception {
        ResultVo vo = null;
        if(!StringUtil.hasText(channel.getChannelName())){//频道名称
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,"频道名称不能为空"));
        }
        if(!StringUtil.hasText(channel.getChannelAliasName())){//频道别名
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,"频道别名不能为空"));
        }
        if(channel.getChannelType()==null){//频道类型（1：PC网站，2：触屏端，3：App）
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,"频道类型不能为空"));
        }
        //添加频道
        vo = commonManager.addChannel(channel);
        return JsonUtil.toJson(vo);
    }

    /**
     * 修改频道
     * @param channel
     * @return
     * @throws Exception
     */
    @RequestMapping(value="/channel/update",method = RequestMethod.POST)
    public String updateChannel(HsChannel channel) throws Exception {
        ResultVo vo = null;
        if(channel.getId()== null || channel.getId().intValue()<=0){//频道ID
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,"频道ID不能为空"));
        }
        if(!StringUtil.hasText(channel.getChannelName())){//频道名称
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,"频道名称不能为空"));
        }
        if(StringUtil.hasText(channel.getChannelAliasName())){//频道别名
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,"频道别名不能修改"));
        }
        if(channel.getChannelType()==null){//频道类型（1：PC网站，2：触屏端，3：App）
            return JsonUtil.toJson(ResultVo.error(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR,"频道类型不能为空"));
        }
        //修改频道
        vo = commonManager.updateChannel(channel);
        return JsonUtil.toJson(vo);
    }

}
