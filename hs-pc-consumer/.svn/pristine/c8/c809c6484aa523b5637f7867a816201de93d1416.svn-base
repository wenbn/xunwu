package www.ucforward.com.manager.impl;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.apache.shiro.crypto.hash.SimpleHash;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.utils.DateUtils;
import org.utils.StringUtil;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.entity.*;
import www.ucforward.com.manager.IMemberManager;
import www.ucforward.com.serviceInter.HousesService;
import www.ucforward.com.serviceInter.MemberService;
import www.ucforward.com.utils.MD5Utils;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import java.util.*;
import java.util.stream.Collector;
import java.util.stream.Collectors;

/**
 * @author wenbn
 * @version 1.0
 * @date 2018/8/21
 */
@Service
public class IMemberManagerImpl implements IMemberManager {

    @Value("${PASSWORD_HASHITERATIONS}")
    private String PASSWORD_HASHITERATIONS;

    // 日志记录器
    private static Logger logger = LoggerFactory.getLogger(ICommonManagerImpl.class);

    @Resource
    private MemberService memberService;
    @Resource
    private HousesService housesService;

    /**
     * 获取内部用户列表
     *
     * @param condition
     * @return
     */
    @Override
    public ResultVo getUserlList(Map<Object, Object> condition) {
        ResultVo vo = null;
        //自定义查询列名
        List<String> queryColumn = new ArrayList<>();
        queryColumn.add("ID userId");//主键ID
        queryColumn.add("USERCODE usercode");//账号
        queryColumn.add("USERNAME username");//姓名
        queryColumn.add("USER_LOGO userLogo");//个人头像
        queryColumn.add("MOBILE mobile");//手机号
        queryColumn.add("LOCKED locked");//账号是否锁( 0未锁定 , 1：锁定)
        queryColumn.add("CITY city");//城市
        queryColumn.add("COMMUNITY community");//社区
        queryColumn.add("SUB_COMMUNITY subCommunity");//子社区
        queryColumn.add("GOLD gold");//积分帐户,默认为0
        queryColumn.add("IS_DEL isDel");//是否删除0:不删除，1：删除
        queryColumn.add("CREATE_TIME createTime");//创建时间
        condition.put("queryColumn", queryColumn);
        try {
            vo = memberService.selectCustomColumnNamesList(HsSysUser.class, condition);
        } catch (Exception e) {
            logger.warn("Remote call to getUserlList fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        condition = null;
        return vo;
    }

    /**
     * 获取内部用户详情
     *
     * @param userId
     * @return
     */
    @Override
    public ResultVo getUserDetail(Integer userId) {
        ResultVo vo = null;
        try {
            vo = memberService.select(userId, new HsSysUser());
        } catch (Exception e) {
            logger.warn("Remote call to getUserDetail fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 修改内部用户
     *
     * @param user
     * @return
     */
    @Override
    public ResultVo updateUser(HsSysUser user) {
        ResultVo vo = null;
        try {
            String password = user.getPassword();//判断密码是否为空
            String mobile = user.getMobile();//判断手机号码
            if (!StringUtil.hasText(password)) {//修改密码,默认6个1
                int salt = (int) ((Math.random() * 9 + 1) * 10000);
                SimpleHash md5 = new SimpleHash("MD5", 111111, salt + "", Integer.parseInt(PASSWORD_HASHITERATIONS));
                //SimpleHash md5 = new SimpleHash("MD5", password, salt+"", Integer.parseInt(PASSWORD_HASHITERATIONS));
                user.setPassword(md5.toString());//密码
                user.setSalt(StringUtil.trim(salt));
            }
            if (!StringUtil.hasText(mobile)) {
                //需要修改手机号
                Map<Object, Object> condition = Maps.newHashMap();
                condition.put("mobile", user.getMobile());//手机号码
                int count = memberService.checkExistUserCodeOrMobile(condition);//检查系统中是否存在账号或手机号码
                if (count > 0) {
                    return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, "已存在该手机号码");
                }
            }
            vo = memberService.update(user);
        } catch (Exception e) {
            logger.warn("Remote call to updateUser fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 新增内部用户
     *
     * @param user
     * @return
     */
    @Override
    public ResultVo addUser(HsSysUser user) {
        ResultVo vo = null;
        //自定义查询列名
        Map<Object, Object> condition = Maps.newHashMap();
        condition.put("usercode", user.getUsercode());//账号
        condition.put("mobile", user.getMobile());//手机号码
        try {
            int count = memberService.checkExistUserCodeOrMobile(condition);//检查系统中是否存在账号或手机号码
            if (count > 0) {
                return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, "已存在该账号或者手机号码");
            }
            //修改密码,默认6个1
            int salt = (int) ((Math.random() * 9 + 1) * 10000);
            SimpleHash md5 = new SimpleHash("MD5", "111111", salt + "", Integer.parseInt(PASSWORD_HASHITERATIONS));
            //SimpleHash md5 = new SimpleHash("MD5", password, salt+"", Integer.parseInt(PASSWORD_HASHITERATIONS));
            user.setPassword(md5.toString());//密码
            user.setSalt(StringUtil.trim(salt));
            vo = memberService.insert(user);
        } catch (Exception e) {
            logger.warn("Remote call to addUser fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 获取角色列表
     *
     * @param condition
     * @return
     */
    @Override
    public ResultVo getRoleList(Map<Object, Object> condition) {
        ResultVo vo = null;
        try {
            vo = memberService.selectList(new HsSysRole(), condition, 1);
        } catch (Exception e) {
            logger.warn("Remote call to getRolelList fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        condition = null;
        return vo;
    }

    /**
     * 获取角色详情
     *
     * @param roleId
     * @return
     */
    @Override
    public ResultVo getRoleDetail(String roleId) {
        ResultVo vo = null;
        try {
            vo = memberService.select(roleId, new HsSysRole());
        } catch (Exception e) {
            logger.warn("Remote call to getRoleDetail fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 修改角色信息
     *
     * @param role
     * @return
     */
    @Override
    public ResultVo updateRole(HsSysRole role) {
        ResultVo vo = null;
        try {
            String roleName = role.getRoleName();//获取角色名称,判断是否存在
            if (StringUtil.hasText(roleName)) {
                //自定义查询列名
                List<String> queryColumn = new ArrayList<>();
                Map<Object, Object> condition = Maps.newHashMap();
                queryColumn.add("ID roleId");//主键ID
                condition.put("roleName", roleName);
                condition.put("queryColumn", queryColumn);
                condition.put("isDel", 0);//是否删除0:不删除，1：删除
                vo = memberService.selectCustomColumnNamesList(HsSysRole.class, condition);
                if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {
                    return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                }
                List<Map<Object, Object>> roles = (List<Map<Object, Object>>) vo.getDataSet();
                if (roles != null && roles.size() > 0) {//角色名称已存在
                    if (roles.size() != 1 || !StringUtil.trim(roles.get(0).get("roleId")).equals(role.getId())) {
                        return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, "角色名称已存在");
                    }
                }
            }
            role.setUpdateTime(new Date());
            vo = memberService.update(role);
        } catch (Exception e) {
            logger.warn("Remote call to updateRole fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 新增角色信息
     *
     * @param role
     * @return
     */
    @Override
    public ResultVo addRole(HsSysRole role) {
        ResultVo vo = null;
        try {
            String roleName = role.getRoleName();//获取角色名称,判断是否存在
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            Map<Object, Object> condition = Maps.newHashMap();
            queryColumn.add("ID roleId");//主键ID
            condition.put("roleName", roleName);
            condition.put("queryColumn", queryColumn);
            vo = memberService.selectCustomColumnNamesList(HsSysRole.class, condition);
            if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {
                return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
            }
            List<Map<Object, Object>> roles = (List<Map<Object, Object>>) vo.getDataSet();
            if (roles != null && roles.size() > 0) {//角色名称已存在
                return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, "角色名称已存在");
            }
            Date date = new Date();
            role.setId(MD5Utils.getPwd(DateUtils.getTime()));
            role.setCreateTime(date);
            role.setUpdateTime(date);
            vo = memberService.insert(role);
            if (vo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                vo.setDataSet(null);
            }
            queryColumn = null;
            condition = null;
            roles = null;
            date = null;
        } catch (Exception e) {
            logger.warn("Remote call to updateRole fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 获取权限列表
     *
     * @param condition
     * @return
     */
    @Override
    public ResultVo getPermissionList(Map<Object, Object> condition) {
        ResultVo vo = new ResultVo();
        try {

            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            //查询该频道下已绑定的数据
            queryColumn.add("ID id");//角色权限表ID
            queryColumn.add("PERMISSION_NAME permissionName");//资源名称
            queryColumn.add("PERMISSION_TYPE permissionType");//资源类型：1：menu,2：button
            queryColumn.add("PERMISSION_URL permissionUrl");//访问url地址
            queryColumn.add("PARENT_ID parentId");//父结点id,默认为-1
            queryColumn.add("CURRENT_LEVEL currentLevel");//当前级
            queryColumn.add("SORT_NO sortNo");//排序号
            condition.put("queryColumn",queryColumn);
            condition.put("isForbidden",0);//是否禁用,0：启用，1禁用
            condition.put("isDel",0);//角色ID
            List<Map<String, Object>> perms =memberService.findAllPermission(condition);
            vo.setDataSet(perms);
        } catch (Exception e) {
            logger.warn("Remote call to getRolelList fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        condition = null;
        return vo;
    }



    /**
     * 新增权限
     *
     * @param permission
     * @return
     */
    @Override
    public ResultVo addPermission(HsSysPermission permission) {
        ResultVo vo = null;
        try {
            String permissionName = permission.getPermissionName();//资源名称
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            Map<Object, Object> condition = Maps.newHashMap();
            queryColumn.add("ID permissionId");//主键ID
            condition.put("permissionName", permissionName);
            condition.put("queryColumn", queryColumn);
            vo = memberService.selectCustomColumnNamesList(HsSysPermission.class, condition);
            if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {
                return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
            }
            List<Map<Object, Object>> permisssion = (List<Map<Object, Object>>) vo.getDataSet();
            if (permisssion != null && permisssion.size() > 0) {//资源名称已存在
                return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, "资源名称已存在");
            }
            Date date = new Date();
            permission.setCreateTime(date);
            permission.setUpdateTime(date);
            vo = memberService.insert(permission);
            if (vo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                vo.setDataSet(null);
            }
            queryColumn = null;
            condition = null;
            permission = null;
            date = null;
        } catch (Exception e) {
            logger.warn("Remote call to addPermission fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo ;
    }

    /**
     * 修改权限
     * @param permission
     * @return
     */
    @Override
    public ResultVo updatePermission(HsSysPermission permission) {
        ResultVo vo = null;
        try {
            String permissionName = permission.getPermissionName();//资源名称
            if (StringUtil.hasText(permissionName)) {
                //自定义查询列名
                List<String> queryColumn = new ArrayList<>();
                Map<Object, Object> condition = Maps.newHashMap();
                queryColumn.add("ID permissionId");//主键ID
                condition.put("permissionName", permissionName);
                condition.put("queryColumn", queryColumn);
                condition.put("isDel", 0);//是否删除0:不删除，1：删除
                vo = memberService.selectCustomColumnNamesList(HsSysRole.class, condition);
                if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {
                    return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                }
                List<Map<Object, Object>> roles = (List<Map<Object, Object>>) vo.getDataSet();
                if (roles != null && roles.size() > 0) {//资源名称已存在
                    if (roles.size() != 1 || !StringUtil.trim(roles.get(0).get("permissionId")).equals(permission.getId())) {
                        return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, "资源名称已存在");
                    }
                }
            }
            permission.setUpdateTime(new Date());
            vo = memberService.update(permission);
        } catch (Exception e) {
            logger.warn("Remote call to updatePermission fails" + e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR, ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 为角色添加权限,先判断是否有对应的权限，如果已存在关联删除，不存在的直接删除
     * @param pids 权限IDs
     * @param roleId 角色ID
     * @return
     */
    @Override
    public ResultVo grantPermission(List<Integer> pids, String roleId) {
        ResultVo vo = null;
        Map<Object,Object> condition = Maps.newHashMap();
        try {
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            //查询该频道下已绑定的数据
            queryColumn.add("ID rolePermissionId");//角色权限表ID
            queryColumn.add("PERMISSION_ID permissionId");//权限id
            condition.put("queryColumn",queryColumn);
            condition.put("isForbidden",0);//是否禁用,0：启用，1禁用
            condition.put("roleId",roleId);//角色ID
            vo = memberService.selectCustomColumnNamesList(HsSysRolePermission.class,condition);
            if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {//查询成功
                return vo;
            }
            //获取该角色下已经绑定的权限信息
            List<Map<Object,Object>> bindingRolePermissions = (List<Map<Object, Object>>) vo.getDataSet();
            List<String> rolePermissionIds = Lists.newArrayList();//需要移除的权限信息
            if(bindingRolePermissions!=null && bindingRolePermissions.size()>0){
                for (Map<Object, Object> rolePermission : bindingRolePermissions) {//遍历已绑定的展位数,将已绑定的Id过滤掉
                    String rolePermissionId = StringUtil.trim(rolePermission.get("rolePermissionId"));
                    Integer permissionId = StringUtil.getAsInt(StringUtil.trim(rolePermission.get("permissionId")));
                    if(pids.contains(permissionId)){//如果包含已绑定的
                        pids.remove(permissionId);
                    }else{//添加到需要移除的权限信息
                        rolePermissionIds.add(rolePermissionId);
                    }
                }
            }
            if(rolePermissionIds!=null && rolePermissionIds.size()>0){
                //批量删除数据,只有关联表才做删除
                condition.clear();
                condition.put("ids",rolePermissionIds);
                ResultVo batchDeleteVo = memberService.batchDelete(HsSysRolePermission.class,condition);
            }

            if(pids!=null && pids.size()>0){
                List<HsSysRolePermission> perms = Lists.newArrayList();
                HsSysRolePermission perm = null;
                Date date =  new Date();
                for (Integer pid : pids) {//
                    perm =new HsSysRolePermission();
                    perm.setId(MD5Utils.getPwd(DateUtils.getTime()));
                    perm.setPermissionId(pid);
                    perm.setRoleId(roleId);
                    perm.setCreateTime(date);
                    perm.setIsForbidden(0);
                    perm.setCreateBy("-1");
                    perm.setUpdateBy("-1");
                    perms.add(perm);
                }
                //批量插入数据
                condition.clear();
                condition.put("data",perms);
                vo = memberService.batchInsert(new HsSysRolePermission(),condition);


                perms = null;
                perm = null;
                date = null;

            }
            condition =null;
            queryColumn =null;
        } catch (Exception e) {
            logger.warn("Remote call to grantPermission fails"+e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 为用户添加角色 先判断是否有对应的权限，如果已存在关联删除，不存在的直接删除
     * @param roleIdsList
     * @param userId
     * @return
     */
    @Override
    public ResultVo grantRole(List<String> roleIdsList, Integer userId) {
        ResultVo vo = null;
        Map<Object,Object> condition = Maps.newHashMap();
        try {
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            //查询该频道下已绑定的数据
            queryColumn.add("ID userRoleId");//用户角色表ID
            queryColumn.add("ROLE_ID roleId");//角色id
            condition.put("queryColumn",queryColumn);
            condition.put("userId",userId);//角色ID
            vo = memberService.selectCustomColumnNamesList(HsSysUserRole.class,condition);
            if (vo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {//查询成功
                return vo;
            }
            //获取该用户下已经绑定的角色信息
            List<Map<Object,Object>> bindingUserRoles = (List<Map<Object, Object>>) vo.getDataSet();
            List<String> roleIds = Lists.newArrayList();//需要移除的角色信息
            if(bindingUserRoles!=null && bindingUserRoles.size()>0){
                for (Map<Object, Object> userRole : bindingUserRoles) {//遍历已绑定的展位数,将已绑定的Id过滤掉
                    String userRoleId = StringUtil.trim(userRole.get("userRoleId"));//用户角色表ID
                    String roleId = StringUtil.trim(userRole.get("roleId"));//角色id
                    if(roleIdsList.contains(roleId)){//如果包含已绑定的
                        roleIdsList.remove(roleId);
                    }else{//添加到需要移除的权限信息
                        roleIds.add(userRoleId);
                    }
                }
            }
            if(roleIds!=null && roleIds.size()>0){
                //批量删除数据,只有关联表才做删除
                condition.clear();
                condition.put("ids",roleIds);
                ResultVo batchDeleteVo = memberService.batchDelete(HsSysUserRole.class,condition);
            }

            if(roleIdsList!=null && roleIdsList.size()>0){
                List<HsSysUserRole> userRoles = Lists.newArrayList();
                HsSysUserRole userRole = null;
                Date date =  new Date();
                for (String roleId : roleIdsList) {//
                    userRole =new HsSysUserRole();
                    userRole.setId(MD5Utils.getPwd(DateUtils.getTime()));
                    userRole.setRoleId(roleId);
                    userRole.setUserId(userId);
                    userRole.setCreateTime(date);
                    userRole.setCreateBy("-1");
                    userRole.setUpdateBy("-1");
                    userRoles.add(userRole);
                }
                //批量插入数据
                condition.clear();
                condition.put("data",userRoles);
                vo = memberService.batchInsert(new HsSysUserRole(),condition);

                userRoles = null;
                userRole = null;
                date = null;

            }
            condition =null;
            queryColumn =null;
        } catch (Exception e) {
            logger.warn("Remote call to grantPermission fails"+e);
            vo = ResultVo.error(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR,ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    @Override
    public ResultVo addLoansApply(HsMemberFinancialLoansApply financialLoansApply) {
        ResultVo resultVo = new ResultVo();
        try {
            resultVo = memberService.insert(financialLoansApply);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    @Override
    public ResultVo getLoansApply(Map<Object,Object> condition){
        ResultVo resultVo = new ResultVo();
        try {
            ResultVo selectList = memberService.selectList(new HsMemberFinancialLoansApply(), condition, 0);
            if(selectList != null && selectList.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && selectList.getDataSet() != null){
                List<Map<Object, Object>> dataSet = (List<Map<Object, Object>>) selectList.getDataSet();
                Map<Object, Object> objectObjectMap = dataSet.get(0);
                resultVo.setDataSet(objectObjectMap);
            }
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    @Override
    public ResultVo getPurchaseApplyList(Map<Object,Object> condition){
        ResultVo resultVo = new ResultVo();
        List<Map<Object, Object>> resultList = new ArrayList<>();
        try {
            ResultVo applyResultVo = memberService.selectList(new HsMemberDirectPurchaseApply(), condition, 0);
            if(applyResultVo == null || applyResultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS || applyResultVo.getDataSet() == null){
                resultVo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                resultVo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                return resultVo;
            }
            List<Map<Object, Object>> applyList = (List<Map<Object, Object>>) applyResultVo.getDataSet();
            //获取楼盘id
            List<String> buildingIds = applyList.stream().map(map -> StringUtil.trim(map.get("buildingId"))).collect(Collectors.toList());
            condition.clear();
            condition.put("ids",buildingIds);
            condition.put("isDel",0);
            ResultVo buildingResultVo = housesService.selectList(new HsHouseNewBuilding(), condition, 0);
            if(buildingResultVo != null && buildingResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && buildingResultVo.getDataSet() != null){
                List<Map<Object, Object>> buildingList = (List<Map<Object, Object>>) buildingResultVo.getDataSet();
                for (Map<Object, Object> map : applyList) {
                    String buildingId = StringUtil.trim(map.get("buildingId"));
                    for (Map<Object, Object> buildingMap : buildingList) {
                        String id = StringUtil.trim(buildingMap.get("id"));
                        if(id.equals(buildingId)){
                            String projectName = StringUtil.trim(buildingMap.get("projectName"));
                            double maxHouseRent = StringUtil.getDouble(StringUtil.trim(buildingMap.get("maxHouseRent")));
                            String city = StringUtil.trim(buildingMap.get("city"));
                            String community = StringUtil.trim(buildingMap.get("community"));
                            String subCommunity = StringUtil.trim(buildingMap.get("subCommunity"));
                            StringBuilder area = new StringBuilder();
                            area.append(city)
                                    .append(" ")
                                    .append(community)
                                    .append(" ")
                                    .append(subCommunity);
                            map.put("projectName",projectName);
                            map.put("area",area.toString());
                            map.put("maxHouseRent",maxHouseRent);
                            break;
                        }
                    }
                    resultList.add(map);
                }
            }
            resultVo.setDataSet(resultList);
            resultVo.setPageInfo(applyResultVo.getPageInfo());
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    @Override
    public ResultVo getPurchaseApplyDetails(Integer id) {
        ResultVo resultVo = new ResultVo();
        Map<String,Object> resultMap = new HashMap<>(10);
        try {
            resultVo = memberService.select(id, new HsMemberDirectPurchaseApply());
            if(resultVo == null && resultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS && resultVo.getDataSet() == null){
                resultVo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                resultVo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                return resultVo;
            }
            HsMemberDirectPurchaseApply purchaseApply = (HsMemberDirectPurchaseApply) resultVo.getDataSet();
            Integer buildingId = purchaseApply.getBuildingId();
            Integer memberId = purchaseApply.getMemberId();
            resultMap.put("code",purchaseApply.getCode());
            resultMap.put("createTime",purchaseApply.getCreateTime());
            resultMap.put("status",purchaseApply.getStatus());

            //获取楼盘信息
            String projectName = "";
            String area = "";
            ResultVo buildingResultVo = housesService.select(buildingId, new HsHouseNewBuilding());
            if(buildingResultVo != null && buildingResultVo.getDataSet() != null && buildingResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                HsHouseNewBuilding building = (HsHouseNewBuilding) buildingResultVo.getDataSet();
                projectName = building.getProjectName();
                String city = building.getCity();
                String community = building.getCommunity();
                String subCommunity = building.getSubCommunity();
                area = city + " " + community + " " + subCommunity;
            }
            //获取用户申购信息
            //用户姓名
            String name = "";
            Map<Object,Object> condition = new HashMap<>(2);
            //自定义查询的列名
            List<String> queryColumn = new ArrayList<>();
            queryColumn.add("NAME name");
            queryColumn.add("FAMILY_NAME familyName");
            condition.put("queryColumn",queryColumn);
            condition.put("isDel",0);
            condition.put("memberId",memberId);
            ResultVo buildingMemberResultVo =housesService.selectCustomColumnNamesList(HsHouseNewBuildingMemberApply.class,condition);
            if(buildingMemberResultVo != null && buildingMemberResultVo.getDataSet() != null && buildingMemberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                List<Map<Object,Object>> buildingMemberApplyList = (List<Map<Object,Object>>) buildingMemberResultVo.getDataSet();
                if(buildingMemberApplyList.size() > 0){
                    Map<Object, Object> buildingMemberApply = buildingMemberApplyList.get(0);
                    String familyName = StringUtil.trim(buildingMemberApply.get("familyName"));
                    String nameStr = StringUtil.trim(buildingMemberApply.get("name"));
                    name = familyName + nameStr;
                }
            }
            resultMap.put("projectName",projectName);
            resultMap.put("area",area);
            resultMap.put("name",name);
            resultVo.setDataSet(resultMap);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }
}
