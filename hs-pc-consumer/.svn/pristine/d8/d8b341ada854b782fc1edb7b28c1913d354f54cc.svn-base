package www.ucforward.com.controller.order;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import org.apache.shiro.SecurityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.utils.StringUtil;
import www.ucforward.com.constants.AppRquestParamsConstant;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.controller.base.BaseController;
import www.ucforward.com.controller.house.HousesController;
import www.ucforward.com.entity.ActiveUser;
import www.ucforward.com.manager.IHousesManager;
import www.ucforward.com.manager.IOrderManager;
import www.ucforward.com.utils.JsonUtil;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 订单管理
 * @Auther: lsq
 * @Date: 2018/9/13 18:37
 * @Description:
 */
@Controller
@ResponseBody
public class OrderController extends BaseController {
    // 日志记录器
    private static Logger logger = LoggerFactory.getLogger(OrderController.class);

    @Resource
    private IOrderManager orderManager;

    /**
     * 获取合同列表
     * @param request
     * @return
     */
    @RequestMapping(value = "/contract/list",method = RequestMethod.POST)
    @ResponseBody
    public String getContractList(HttpServletRequest request){
        ResultVo result = new ResultVo();
        Map<Object,Object> condition = new HashMap<>(16);
        try {
            //当前页
            Integer pageIndex = StringUtil.getAsInt(request.getParameter("pageIndex"),1);
            //每页显示数量
            Integer pageSize = StringUtil.getAsInt(request.getParameter("pageSize"), AppRquestParamsConstant.APP_PAGE_SIZE);
            //订单类型 0-租房->1-买房
            String orderType = request.getParameter("orderType");
            //当前页
            condition.put("pageIndex", pageIndex);
            //每页显示数量
            condition.put("pageSize", pageSize);
            //订单状态 0-议价成功->1-客户完善租房/买房信息->2-确认线上合同->3-待支付->4-支付完成
            condition.put("orderStatus",1);
            condition.put("isDel",0);
            condition.put("orderType",orderType);
            result = orderManager.getContractList(condition);
        }catch (Exception e){
            logger.error("OrderController getContractList Exception message:"+e.getMessage());
            result.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            result.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(result);
    }

    /**
     * 获取合同信息
     * @param request
     * @return
     */
    @RequestMapping(value = "/contract/detail",method = RequestMethod.POST)
    @ResponseBody
    public String getContract(HttpServletRequest request){
        ResultVo result = new ResultVo();
        try {
            String orderIdStr = request.getParameter("orderId");
            if(!StringUtil.hasText(orderIdStr)){
                result.setResult(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR);
                result.setMessage(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(result);
            }
            int orderId = StringUtil.getAsInt(orderIdStr);
            result = orderManager.getContract(orderId);
        }catch (Exception e){
            logger.error("OrderController getContract Exception message:"+e.getMessage());
            result.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            result.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(result);
    }

    /**
     * 修改合同内容（增加附加条款）
     * @param request
     * @return
     */
    @RequestMapping(value = "/contract/update",method = RequestMethod.POST)
    @ResponseBody
    public String updateContract(HttpServletRequest request){
        ResultVo result = new ResultVo();
        try {
            ActiveUser user = (ActiveUser) SecurityUtils.getSubject().getPrincipal();
            //用户id
            Integer userId = user.getUserid();
            //附加条款 json格式数组 最多只能添加8条
            String additionalTermsStr = request.getParameter("additionalTerms");
            //订单id
            String orderIdStr = request.getParameter("orderId");
            if(!StringUtil.hasText(additionalTermsStr) || !StringUtil.hasText(orderIdStr)){
                result.setResult(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR);
                result.setMessage(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE);
                return JsonUtil.toJson(result);
            }
            List<String> additionalTermsList;
            try {
                JSONArray additionalTerms = JSON.parseArray(additionalTermsStr);
                additionalTermsList = additionalTerms.toJavaList(String.class);
                if(additionalTermsList.size() > 8){
                    result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                    result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE + "附加条款不能超过8条");
                    return JsonUtil.toJson(result);
                }
            }catch (Exception e){
                e.printStackTrace();
                result.setResult(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR);
                result.setMessage(ResultConstant.SYS_REQUIRED_PARAMETER_ERROR_VALUE + "参数不满足json格式");
                return JsonUtil.toJson(result);
            }
            int orderId = StringUtil.getAsInt(orderIdStr);
            result = orderManager.updateContract(additionalTermsList,orderId,userId);
        }catch (Exception e){
            logger.error("OrderController updateContract Exception message:"+e.getMessage());
            result.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            result.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return JsonUtil.toJson(result);
    }
}
