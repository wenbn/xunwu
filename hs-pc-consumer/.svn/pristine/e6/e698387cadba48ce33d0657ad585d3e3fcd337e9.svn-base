package www.ucforward.com.manager.impl;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Service;
import org.utils.StringUtil;
import www.ucforward.com.constants.Constant;
import www.ucforward.com.constants.RedisConstant;
import www.ucforward.com.constants.ResultConstant;
import www.ucforward.com.controller.customService.CustomController;
import www.ucforward.com.dto.HousingApplicationDto;
import www.ucforward.com.entity.*;
import www.ucforward.com.manager.IHousesManager;
import www.ucforward.com.serviceInter.HousesService;
import www.ucforward.com.serviceInter.MemberService;
import www.ucforward.com.serviceInter.OrderService;
import www.ucforward.com.utils.*;
import www.ucforward.com.vo.ResultVo;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;

/**
 * @Auther: lsq
 * @Date: 2018/8/20 19:02
 * @Description:
 */
@Service("housesManager")
public class IHousesManagerImpl implements IHousesManager {

    private static Logger logger = LoggerFactory.getLogger(IHousesManagerImpl.class); // 日志记录

    /**
     * 房源相关
     */
    @Resource
    private HousesService housesService;
    /**
     * 人员相关
     */
    @Resource
    private MemberService memberService;

    @Resource
    private OrderService orderService;

    /**
     * lsq
     * 获取业主预约获取房源申请
     * @param condition
     * @return
     */
    @Override
    public ResultVo getOwnerHousingApplication(Map<Object, Object> condition) {
        ResultVo result = new ResultVo();
        List<Map<Object,Object>> dataSet = new ArrayList<>();
        try {
            //1.获取申请信息
            result = housesService.selectList(new HsOwnerHousingApplication(),condition,0);
            if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && result.getDataSet() != null){
                //2.根据房源申请信息获取，房源所属人员memberIds
                List<Integer> memberIds = new ArrayList<>();
                //房源申请ids
                List<Integer> applyIds = new ArrayList<>();
                List<Map<Object,Object>> list = (List<Map<Object,Object>>)result.getDataSet();
                list.forEach(map->{
                    int memberId = Integer.parseInt(StringUtil.trim(map.get("memberId")));
                    int id = Integer.parseInt(StringUtil.trim(map.get("id")));
                    memberIds.add(memberId);
                    applyIds.add(id);
                });
                //3.根据获取到的memberIds获取人员手机号map
                //人员手机号map key 人员id value 人员手机号
                Map<Integer,String> mobileMap = new HashMap<>(10);
                condition.clear();
                //自定义查询列名
                List<String> queryColumn = new ArrayList<>();
                //主键ID
                queryColumn.add("ID id");
                //手机号
                queryColumn.add("MEMBER_MOBLE memberMoble");
                condition.put("queryColumn",queryColumn);
                condition.put("memberIds",memberIds);
                ResultVo memberResultVo = memberService.selectList(new HsMember(), condition, 0);
                if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && memberResultVo.getDataSet() != null){
                    List<HsMember> memberList = (List<HsMember>) memberResultVo.getDataSet();
                    memberList.forEach(hsMember->{
                        Integer id = Integer.parseInt(StringUtil.trim(hsMember.getId()));
                        String memberMoble = StringUtil.trim(hsMember.getMemberMoble());
                        mobileMap.put(id,memberMoble);
                    });
                }

                //根据房源申请id获取房产证照片
                Map<String,Map<String,String>> pocImgMap = new HashMap<>(10);
                queryColumn.clear();
                queryColumn.add("POC_IMG1 pocImg1");
                queryColumn.add("POC_IMG2 pocImg2");
                queryColumn.add("POC_IMG3 pocImg3");
                condition.clear();
                condition.put("queryColumn",queryColumn);
                condition.put("applyIds",applyIds);
                ResultVo resultVo = housesService.selectCustomColumnNamesList(HsHouseCredentialsData.class, condition);
                if(resultVo != null && resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && resultVo.getDataSet() != null){
                    List<Map<Object, Object>> credentialsList = (List<Map<Object, Object>>) resultVo.getDataSet();
                    credentialsList.forEach(credentials ->{
                        //封装房产证信息
                        Map<String,String> imgMap = new HashMap<>(3);
                        String applyId = StringUtil.trim(credentials.get("applyId"));
                        String pocImg1 = StringUtil.trim(credentials.get("pocImg1"));
                        String pocImg2 = StringUtil.trim(credentials.get("pocImg2"));
                        String pocImg3 = StringUtil.trim(credentials.get("pocImg3"));
                        imgMap.put("pocImg1",pocImg1);
                        imgMap.put("pocImg2",pocImg2);
                        imgMap.put("pocImg3",pocImg3);
                        pocImgMap.put(applyId,imgMap);
                    });
                }
                //封装人员手机号及房产证信息
                list.forEach(map->{
                    String memberIdStr = StringUtil.trim(map.get("memberId"));
                    String applyId = StringUtil.trim(map.get("applyId"));
                    String memberMobile = "";
                    String pocImg1 = "";
                    String pocImg2 = "";
                    String pocImg3 = "";
                    //封装手机号
                    if(StringUtil.hasText(memberIdStr)){
                        Integer memberId = Integer.parseInt(memberIdStr);
                        memberMobile = StringUtil.trim(mobileMap.get(memberId));
                    }
                    //获取房产证信息
                    if(StringUtil.hasText(applyId)){
                        Map<String, String> stringStringMap = pocImgMap.get(applyId);
                        pocImg1 = stringStringMap.get("pocImg1");
                        pocImg2 = stringStringMap.get("pocImg2");
                        pocImg3 = stringStringMap.get("pocImg3");
                    }
                    map.put("memberMobile",memberMobile);
                    //处理图片返回值
                    String houseHoldImg = StringUtil.trim(map.get("houseHoldImg"));
                    map.put("houseHoldImg",splice(houseHoldImg));
                    map.put("pocImg1",splice(pocImg1));
                    map.put("pocImg2",splice(pocImg2));
                    map.put("pocImg3",splice(pocImg3));
                    dataSet.add(map);
                });
            }
            result.setDataSet(dataSet);
        } catch (Exception e) {
            logger.error("remote procedure call getOwnerHousingApplication is error" +e);
            result.setDataSet(null);
            result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
            result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
        }
        return result;
    }

    /**
     * lsq
     * 获取业主预约获取房源申请详情
     * @param id 房源申请id
     * @return
     */
    @Override
    public ResultVo getOwnerHousingApplicationById(Integer id) {
        ResultVo result = new ResultVo();
        try {
            Map resultMap = new HashMap(2);
            HousingApplicationDto housingApplication = new HousingApplicationDto();
            HsHouseCredentialsData houseCredentials = new HsHouseCredentialsData();
            //1.获取申请信息
            ResultVo appResult = housesService.select(id,new HsOwnerHousingApplication());
            if(appResult != null && appResult.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && appResult.getDataSet() != null){
                //2.根据房源申请信息获取，房源所属人员memberId
                HsOwnerHousingApplication hsOwnerHousingApplication = (HsOwnerHousingApplication) appResult.getDataSet();
                //3.根据获取到的memberId获取人员手机号map
                Integer memberId = hsOwnerHousingApplication.getMemberId();
                //4.根据上面获取到的人员手机号map,对房源申请信息结果集进行重新封装，将人员手机号封装进去
                HsMember member = null;
                ResultVo memberResultVo = memberService.select(memberId, new HsMember());
                if(memberResultVo != null && memberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    member = (HsMember) memberResultVo.getDataSet();
                }
                String memberMobile = "";
                if(member != null){
                    Integer mId = member.getId();
                    String memberMoble = member.getMemberMoble();
                    if(memberId.equals(mId)){
                        memberMobile = memberMoble;
                        ModelMapperUtil.getInstance().map(hsOwnerHousingApplication,housingApplication);
                        //处理图片返回值
                        String houseHoldImg = StringUtil.trim(hsOwnerHousingApplication.getHouseHoldImg());
                        housingApplication.setHouseHoldImg(splice(houseHoldImg));
                        housingApplication.setMemberMobile(memberMobile);
                    }
                }

                //2.获取业主预约获取房源申请信息

                Map<Object,Object> condition = new HashMap<>(16);
                condition.put("applyId",id);
                ResultVo resultVo = housesService.selectDataByCondition(new HsHouseCredentialsData(), condition);
                if(resultVo != null && resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && resultVo.getDataSet() != null){
                    houseCredentials = (HsHouseCredentialsData) resultVo.getDataSet();
                    //处理图片返回值
                    houseCredentials = credentialsImg(houseCredentials);
                    //resultMap.put("houseCredentials",houseCredentials);
                }
            }
            resultMap.put("housingApplication",housingApplication);
            resultMap.put("houseCredentials",houseCredentials);
            result.setDataSet(resultMap);
        } catch (Exception e) {
            logger.error("remote procedure call getOwnerHousingApplicationById is error" +e);
            result.setDataSet(null);
            result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
            result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
        }
        return result;
    }


    /**
     * 客服审核业主申请房源信息
     * @param condition
     * @return
     */
    @Override
    public ResultVo checkHousingApply(Map<Object, Object> condition) {
        ResultVo vo = null;
        try {
            vo = housesService.checkHousingApplyTx(condition);
            if(vo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                //加入订单池
                condition.putAll((Map<Object, Object>) vo.getDataSet());
                vo = orderService.addSystemOrderPoolTx(condition);
            }
        } catch (Exception e) {
            logger.error("remote procedure call checkHousingApply is error" +e);
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return vo;
    }

    /**
     * 客服审核房源信息
     * @param condition
     * @return
     */
    @Override
    public ResultVo checkHouse(Map<Object, Object> condition) {
        ResultVo vo = null;
        try {
            int houseId = StringUtil.getAsInt(StringUtil.trim(condition.get("houseId")));//房源ID
            //查询该房源对应的任务有没有完成
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            Map<Object,Object> queryFilter = Maps.newHashMap();
            queryColumn.add("ID poolId");//主键ID
            queryColumn.add("HOUSE_ID houseId");//主键ID
            queryColumn.add("IS_FINISHED isFinished");//主键ID
            queryFilter.put("houseId",houseId);
            queryFilter.put("orderType",0);//订单类型 0外获订单->1-外看订单->2合同订单
            queryFilter.put("isDel",0);//是否删除0:不删除，1：删除
            queryFilter.put("queryColumn",queryColumn);
            ResultVo orderVo = orderService.selectCustomColumnNamesList(HsSystemOrderPool.class, queryFilter);
            if(orderVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS){
                return orderVo;
            }
            List<Map<Object,Object>> orderList = (List<Map<Object, Object>>) orderVo.getDataSet();
            Map<Object,Object> orderPool =  orderList.get(0);
            if(orderPool==null){
                return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
            }
            int isFinished = StringUtil.getAsInt(StringUtil.trim(orderPool.get("isFinished")));
            if(isFinished!=5){
                //外获或区域长的任务还未完成
                return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,"外获或区域长的任务还未完成");
            }

            vo = housesService.checkHouse(condition);
            if(vo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                List<Integer> poolIds = Lists.newArrayList();
                poolIds.add(StringUtil.getAsInt(StringUtil.trim(orderPool.get("poolId"))));
                condition.clear();
                condition.put("poolIds",poolIds);
                //查询订单池的任务最后在哪个业务员手里
                List<HsSystemUserOrderTasks>  userOrderTasks = memberService.selectExpiredTasks(condition);
                if(userOrderTasks != null && userOrderTasks.size() > 0){
                    HsSystemUserOrderTasks task = userOrderTasks.get(0);
                    //重置积分规则缓存
                    String cacheKey = RedisUtil.safeGet(RedisConstant.SYS_GOLD_RULE_CACHE_KEY);
                    List<Map<Object, Object>> goldList = JsonUtil.parseJSON2List(cacheKey);

                    //保存用户总共要修改的金额
                    Map<Integer,Integer> user_gold = Maps.newHashMap();
                    List<Integer> userIds = Lists.newArrayList();//保存用户Ids
                    List<HsUserGoldLog> userGoldLogs = Lists.newArrayList();//保存业务员积分日志
                    HsUserGoldLog userGoldLog = null;

                    Map<Object, Object> yaoshiGoldMap = null;//保存第一个拿到钥匙的人
                    Map<Object, Object> waihuoGoldMap = null;//外获上传任务完成
                    Map<Object, Object> quyuzhangGoldMap = null;//区域长上传任务完成
                    Date date = new Date();
                    for (Map<Object, Object> gold : goldList) {
                        if(1==StringUtil.getAsInt(StringUtil.trim(gold.get("goldType")))){//外获上传任务完成
                            waihuoGoldMap = gold;
                        }
                        if(2==StringUtil.getAsInt(StringUtil.trim(gold.get("goldType")))){//区域长上传任务完成
                            quyuzhangGoldMap = gold;
                        }
                        if(6==StringUtil.getAsInt(StringUtil.trim(gold.get("goldType")))){//第一个业务员获取钥匙
                            yaoshiGoldMap = gold;
                        }
                    }

                    //添加对应业务员积分
                    Map<Object,Object> houseKeyMap = (Map<Object, Object>) vo.getDataSet();
                    if(houseKeyMap!=null){
                        int userId = StringUtil.getAsInt(StringUtil.trim(houseKeyMap.get("userId")));
                        userIds.add(userId);
                        int goldRuleId = StringUtil.getAsInt(StringUtil.trim(yaoshiGoldMap.get("id")));
                        int score = StringUtil.getAsInt(StringUtil.trim(yaoshiGoldMap.get("score")));

                        userGoldLog = new HsUserGoldLog();//保存用户积分
                        userGoldLog.setUserId(userId);
                        userGoldLog.setTaskId(-1);
                        userGoldLog.setGoldRuleId(goldRuleId);
                        userGoldLog.setGold(score);
                        userGoldLog.setCreateTime(date);
                        userGoldLog.setRemark("第一个业务员获取钥匙+"+score);
                        userGoldLogs.add(userGoldLog);

                        //保存要修改的积分
                        user_gold.put(userId,score);

                    }
                    Integer taskId = task.getId();//任务ID
                    Integer userId1 = task.getUserId();//保存外获业务员ID
                    Integer userId2 = StringUtil.getAsInt(StringUtil.trim(task.getStandby1()));//保存区域长ID

                    //添加外获业务员积分日志记录
                    userGoldLog = new HsUserGoldLog();
                    userGoldLog.setUserId(userId1);
                    userGoldLog.setTaskId(taskId);
                    userGoldLog.setGoldRuleId(StringUtil.getAsInt(StringUtil.trim(waihuoGoldMap.get("id"))));
                    int score1 = StringUtil.getAsInt(StringUtil.trim(waihuoGoldMap.get("score")));
                    userGoldLog.setGold(score1);
                    userGoldLog.setCreateTime(date);
                    userGoldLog.setRemark("外获上传任务完成+"+score1);
                    userGoldLogs.add(userGoldLog);
                    //保存要修改的积分
                    //user_gold.put(userId1,user_gold.get(userId1)+score1);
                    if(user_gold.containsKey(userId1)){
                        user_gold.put(userId1,user_gold.get(userId1)+score1);
                    }else{
                        user_gold.put(userId1,score1);
                    }

                    //添加区域长积分日志记录
                    userGoldLog = new HsUserGoldLog();
                    userGoldLog.setUserId(userId2);
                    userGoldLog.setTaskId(taskId);
                    userGoldLog.setGoldRuleId(StringUtil.getAsInt(StringUtil.trim(quyuzhangGoldMap.get("id"))));
                    int score2 = StringUtil.getAsInt(StringUtil.trim(quyuzhangGoldMap.get("score")));
                    userGoldLog.setGold(score1);
                    userGoldLog.setCreateTime(date);
                    userGoldLog.setRemark("区域长上传任务完成+"+score2);
                    userGoldLogs.add(userGoldLog);
                    //保存要修改的积分
//                user_gold.put(userId2,user_gold.get(userId2)+score2);
                    if(user_gold.containsKey(userId2)){
                        user_gold.put(userId2,user_gold.get(userId2)+score2);
                    }else{
                        user_gold.put(userId2,score2);
                    }


                    userIds.add(userId1);
                    userIds.add(userId2);
                    //查询用户余额
                    condition.clear();
                    queryColumn.clear();
                    queryColumn.add("ID userId");//用户ID
                    queryColumn.add("GOLD gold");//积分帐户
                    condition.put("queryColumn",queryColumn);
                    condition.put("ids",userIds);
                    ResultVo userVo = memberService.selectCustomColumnNamesList(HsSysUser.class, condition);
                    if(userVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                        List<Map<Object, Object>> userList = (List<Map<Object, Object>>) userVo.getDataSet();
                        List<HsSysUser> updateUser = Lists.newArrayList();//要修改的用户
                        HsSysUser _user = null;
                        for (Map<Object, Object> user : userList) {
                            _user = new HsSysUser();
                            int _userId = StringUtil.getAsInt(StringUtil.trim(user.get("userId")));
                            //获取总共要修改的积分数
                            _user.setId(_userId);
                            _user.setGold(user_gold.get(_userId));
                            _user.setUpdateTime(date);
                            updateUser.add(_user);

                        }
                        if(updateUser!=null && updateUser.size()>0){
                            condition.clear();
                            condition.put("data",updateUser);
                            ResultVo updateVo = memberService.batchUpdate(_user, condition);
                            if(updateVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                                condition.clear();
                                condition.put("data",userGoldLogs);
                                memberService.batchInsert(userGoldLog, condition);
                            }
                        }
                    }
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("remote procedure call checkHouse is error" +e);
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        vo.setDataSet(null);
        return vo;
    }

    /**
     * 客服终审失败
     * @param condition
     * @return
     */
    @Override
    public ResultVo auditFailure(Map<Object, Object> condition){
        ResultVo vo = null;
        try {
            vo = housesService.auditFailure(condition);
        } catch (Exception e) {
            e.printStackTrace();
            vo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            vo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        vo.setDataSet(null);
        return vo;
    }

    /**
     * 获取房源列表（终审）
     * @param condition
     * @return
     */
    @Override
    public ResultVo getMainHousingList(Map<Object, Object> condition){
        ResultVo resultVo = new ResultVo();
        try {
            /**
             * 获取房源信息
             */
            ResultVo houseResultVo = housesService.selectList(new HsMainHouse(), condition, 0);
            if(houseResultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS){
                return houseResultVo;
            }
            List<Map<Object, Object>> houseList = (List<Map<Object, Object>>) houseResultVo.getDataSet();
            if(houseList == null || houseList.size() < 1){
                return resultVo;
            }
            /**
             * 获取业主信息
             */
            //业主信息
            List<HsMember> memberList = new ArrayList<>();
            //业主id列表
            List<Integer> memberIds = houseList.stream().map(house -> StringUtil.getAsInt(StringUtil.trim(house.get("memberId")))).collect(Collectors.toList());
            if(memberIds.size() > 0){
                condition.clear();
                condition.put("memberIds",memberIds);
                condition.put("isDel",0);
                ResultVo memberResultVo = memberService.selectList(new HsMember(), condition, 0);
                if(memberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && memberResultVo.getDataSet() != null){
                    memberList = (List<HsMember>) memberResultVo.getDataSet();
                }
            }
            /**
             * 封装结果集
             */
            List<Map<Object, Object>> resultList = new ArrayList<>();
            for (Map<Object, Object> houseMap : houseList) {
                //房源id
                int id = StringUtil.getAsInt(StringUtil.trim(houseMap.get("id")));
                //业主id
                int memberId = StringUtil.getAsInt(StringUtil.trim(houseMap.get("memberId")));
                String memberMobile = "";
                Optional<HsMember> memberOptional = memberList.stream().filter(member -> member.getId() == memberId).findFirst();
                if(memberOptional.isPresent()){
                    HsMember member = memberOptional.get();
                    memberMobile = member.getMemberMoble();
                }
                houseMap.put("memberMobile",memberMobile);
                resultList.add(houseMap);
            }
            resultVo.setDataSet(resultList);
            resultVo.setPageInfo(houseResultVo.getPageInfo());
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 获取房源详情（终审）
     * @param id
     * @return
     */
    @Override
    public ResultVo getMainHousingInfo(Integer id){
        ResultVo resultVo = new ResultVo();
        try {
            /**
             * 获取房源信息
             */
            ResultVo houseResultVo = housesService.select(id, new HsMainHouse());
            if(houseResultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS || houseResultVo.getDataSet() == null){
                return houseResultVo;
            }
            HsMainHouse house = (HsMainHouse) houseResultVo.getDataSet();
            /**
             * 获取房源图片信息
             */
            HsHouseCredentialsData houseCredentials = new HsHouseCredentialsData();
            Map<Object,Object> condition = new HashMap<>(2);
            condition.put("isDel",0);
            condition.put("houseId",id);
            ResultVo credentialsResultVo = housesService.selectDataByCondition(new HsHouseCredentialsData(), condition);
            if(credentialsResultVo.getDataSet() != null && credentialsResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                houseCredentials = (HsHouseCredentialsData) credentialsResultVo.getDataSet();
                //处理图片返回值
                houseCredentials = credentialsImg(houseCredentials);
            }

            /**
             * 获取业主信息
             */
            HsMember member = new HsMember();
            //业主id
            Integer memberId = house.getMemberId();
            condition.put("memberId",memberId);
            ResultVo memberResultVo = memberService.selectList(new HsMember(), condition, 0);
            if(memberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && memberResultVo.getDataSet() != null){
                List<HsMember> memberList = (List<HsMember>) memberResultVo.getDataSet();
                member = memberList.get(0);
            }
            /**
             * 封装信息
             */
            Map<String,Object> houseMap = new HashMap<>(16);
            JSONObject jsonObject = JSON.parseObject(JSONObject.toJSONString(house, SerializerFeature.WriteMapNullValue));
            houseMap = JSON.toJavaObject(jsonObject, Map.class);
            houseMap.put("memberMobile",StringUtil.trim(member.getMemberMoble()));

            Map<String,Object> resultMap = new HashMap<>(2);
            resultMap.put("house",houseMap);
            resultMap.put("houseCredentials",houseCredentials);
            resultVo.setDataSet(resultMap);
        }catch (Exception e){
            e.printStackTrace();
            logger.error("remote procedure call getMainHousingInfo is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    @Override
    public ResultVo addPurchase(HsHouseNewBuildingMemberApply buildingMemberApply) {
        ResultVo resultVo = new ResultVo();
        try {
            resultVo = housesService.insert(buildingMemberApply);
            if(resultVo == null || resultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS || resultVo.getDataSet() == null){
                resultVo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                resultVo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                return resultVo;
            }
            buildingMemberApply = (HsHouseNewBuildingMemberApply)resultVo.getDataSet();
            Integer memberId = buildingMemberApply.getMemberId();
            Integer projectId = buildingMemberApply.getProjectId();
            //插入人员直购申请
            HsMemberDirectPurchaseApply purchaseApply = new HsMemberDirectPurchaseApply();
            purchaseApply.setCode(UUID.randomUUID().toString());
            purchaseApply.setMemberId(memberId);
            purchaseApply.setBuildingId(projectId);
            purchaseApply.setStatus(0);
            purchaseApply.setCreateBy(memberId);
            purchaseApply.setCreateTime(new Date());
            ResultVo insert = memberService.insert(purchaseApply);
            if(insert == null || insert.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS || insert.getDataSet() == null){
                resultVo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                resultVo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                return resultVo;
            }

        }catch (Exception e){
            logger.error("remote procedure call addPurchase is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    @Override
    public ResultVo addDirectSalesProperty(HsHouseNewBuilding hsHouseNewBuilding) {
        ResultVo resultVo = new ResultVo();
        try {
            resultVo = housesService.insert(hsHouseNewBuilding);
        }catch (Exception e){
            logger.error("remote procedure call addDirectSalesProperty is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    @Override
    public ResultVo getPropertyArea() {
        ResultVo resultVo = new ResultVo();
        try {
            List<Map<Object,Object>> propertyArea = housesService.getPropertyArea();
            resultVo.setDataSet(propertyArea);
        }catch (Exception e){
            logger.error("remote procedure call getPropertyArea is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    @Override
    public ResultVo getDirectSalesDetails(Integer id){
        ResultVo resultVo = new ResultVo();
        try {
            resultVo = housesService.select(id,new HsHouseNewBuilding());
        }catch (Exception e){
            logger.error("remote procedure call getDirectSalesDetails is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    @Override
    public ResultVo getDirectSalesPropertyList(Map<Object, Object> condition){
        ResultVo resultVo = new ResultVo();
        List<Map<Object, Object>> resultList = new ArrayList<>();
        try {
            resultVo = housesService.selectList(new HsHouseNewBuilding(),condition,0);
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && resultVo.getDataSet() != null){
                List<Map<Object, Object>> buildingList = (List<Map<Object, Object>>) resultVo.getDataSet();
                for (Map<Object, Object> map : buildingList) {
                    String projectMainImg = StringUtil.trim(map.get("projectMainImg"));
                    if(StringUtil.hasText(projectMainImg)){
                        projectMainImg = ImageUtil.IMG_URL_PREFIX + projectMainImg;
                    }
                    map.put("projectMainImg",projectMainImg);
                    resultList.add(map);
                }

            }
        }catch (Exception e){
            logger.error("remote procedure call getDirectSalesPropertyList is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 房源投诉列表
     * @param condition
     * @return
     */
    @Override
    public ResultVo getHouseComplainList(Map<Object, Object> condition) {
        ResultVo resultVo = new ResultVo();
        try {
            resultVo = housesService.selectList(new HsHouseComplain(),condition,1);
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && resultVo.getDataSet() != null){
                List<HsHouseComplain> lists = (List<HsHouseComplain>) resultVo.getDataSet();
                //获取房源信息
                List<Map<Object, Object>> houseList = new ArrayList<>();
                List<Integer> houseIds = lists.stream().map(HsHouseComplain::getHouseId).collect(Collectors.toList());
                if(houseIds.size() > 0){
                    condition.clear();
                    condition.put("isDel",0);
                    condition.put("houseIds",houseIds);
                    ResultVo houseResultVo = housesService.selectList(new HsMainHouse(), condition, 0);
                    if(houseResultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS || houseResultVo.getDataSet() == null){
                        logger.error("lsq:getHouseComplainList获取房源失败");
                        return houseResultVo;
                    }
                    houseList = (List<Map<Object, Object>>) houseResultVo.getDataSet();
                }
                //封装结果集
                List<Map> resultList = new ArrayList<>();
                for (HsHouseComplain houseComplain : lists) {
                    Map houseComplainMap;
                    int houseId = houseComplain.getHouseId();
                    //预约类型（0：出租，1：出售）
                    Integer leaseType = null;
                    //城市
                    String city = "";
                    //社区
                    String community = "";
                    //子社区
                    String subCommunity = "";
                    //房源所在区域名称
                    String address = "";
                    //房源主图
                    String houseMainImg = "";
                    Optional<Map<Object, Object>> houseOptional = houseList.stream().filter(map -> StringUtil.getAsInt(StringUtil.trim(map.get("id"))) == houseId).findFirst();
                    if(houseOptional.isPresent()){
                        //封装房源信息
                        Map<Object, Object> house = houseOptional.get();
                        leaseType = StringUtil.getAsInt(StringUtil.trim(house.get("leaseType")));
                        city = StringUtil.trim(house.get("city"));
                        community = StringUtil.trim(house.get("community"));
                        subCommunity = StringUtil.trim(house.get("subCommunity"));
                        address = StringUtil.trim(house.get("address"));
                        houseMainImg = StringUtil.trim(house.get("houseMainImg"));
                        if(StringUtil.hasText(houseMainImg)){
                            houseMainImg = ImageUtil.imgResultUrl(houseMainImg);
                        }
                    }
                    //处理图片
                    String complainProofPic1 = houseComplain.getComplainProofPic1();
                    String complainProofPic2 = houseComplain.getComplainProofPic2();
                    String complainProofPic3 = houseComplain.getComplainProofPic3();
                    if(StringUtil.hasText(complainProofPic1)){
                        houseComplain.setComplainProofPic1(ImageUtil.IMG_URL_PREFIX+complainProofPic1);
                    }
                    if(StringUtil.hasText(complainProofPic2)){
                        houseComplain.setComplainProofPic2(ImageUtil.IMG_URL_PREFIX+complainProofPic2);
                    }
                    if(StringUtil.hasText(complainProofPic3)){
                        houseComplain.setComplainProofPic3(ImageUtil.IMG_URL_PREFIX+complainProofPic3);
                    }
                    JSONObject jsonObject = JSON.parseObject(JSONObject.toJSONString(houseComplain, SerializerFeature.WriteMapNullValue));
                    houseComplainMap = JSON.toJavaObject(jsonObject, Map.class);
                    houseComplainMap.put("leaseType",leaseType);
                    houseComplainMap.put("city",city);
                    houseComplainMap.put("community",community);
                    houseComplainMap.put("subCommunity",subCommunity);
                    houseComplainMap.put("address",address);
                    houseComplainMap.put("houseMainImg",houseMainImg);
                    resultList.add(houseComplainMap);
                }
                resultVo.setDataSet(resultList);
            }

        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 新增房源投诉（新建单）
     * @param houseComplain 房源投诉表
     * @return
     */
    @Override
    public ResultVo addHouseComplain(HsHouseComplain houseComplain){
        ResultVo resultVo = new ResultVo();
        try {
            //生成投诉code
            String complainCode = "TS_" + RandomUtils.getRandomNumbersAndLetters(32);
            houseComplain.setComplainCode(complainCode);
            //获取房源信息
            //房源编号
            String houseCode = houseComplain.getStandby1();
            Map<Object,Object> condition = new HashMap<>(2);
            condition.put("isDel",0);
            condition.put("houseCode",houseCode);
            ResultVo houseResultVo = housesService.selectList(new HsMainHouse(), condition, 0);
            if(houseResultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS){
                logger.error("lsg:addHouseComplain 获取房源信息失败");
                resultVo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                resultVo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE + ":获取房源信息失败");
                return resultVo;
            }
            List<Map<Object, Object>> houseList = (List<Map<Object, Object>>) houseResultVo.getDataSet();
            if(houseList == null || houseList.size() < 1){
                logger.error("lsg:addHouseComplain 房源信息不存在");
                resultVo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                resultVo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE + ":房源信息不存在");
                return resultVo;
            }
            Map<Object, Object> houseMap = houseList.get(0);
            //封装房源id
            int houseId = StringUtil.getAsInt(StringUtil.trim(houseMap.get("id")));
            houseComplain.setHouseId(houseId);
            //将备用字段清空
            houseComplain.setStandby1("");
            resultVo = housesService.insert(houseComplain);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;

    }

    /**
     * 房源投诉转单
     * 订单需要外获、外看人员配合，将投诉单插入到订单池
     * @param id
     * @param userId
     * @return
     */
    @Override
    public ResultVo houseComplainTransfer(Integer id,Integer userId){
        ResultVo resultVo = new ResultVo();
        Date date = new Date();
        try {
            //获取投诉订单信息
            resultVo = housesService.select(id, new HsHouseComplain());
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && resultVo.getDataSet() != null){
                //房源投诉订单
                HsHouseComplain complain = (HsHouseComplain) resultVo.getDataSet();
                Integer status = complain.getStatus();
                if(status == 1){
                    resultVo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                    resultVo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE + ":订单正在处理中。不能进行转单操作");
                    return resultVo;
                }
                //修改订单状态
                //投诉状态：0未接单 1业务员处理 2业务员处理完成 3已关单
                complain.setStatus(1);
                ResultVo complainUpdate = housesService.update(complain);
                if(complainUpdate.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    //房源id
                    Integer houseId = complain.getHouseId();
                    //获取房源信息
                    resultVo = housesService.select(houseId,new HsMainHouse());
                    if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && resultVo.getDataSet() != null){
                        HsMainHouse house = (HsMainHouse) resultVo.getDataSet();
                        Integer applyId = house.getApplyId();
                        //插入订单池
                        HsSystemOrderPool orderPool = new HsSystemOrderPool();
                        orderPool.setOrderCode("SCO_"+ RandomUtils.getRandomCode());
                        orderPool.setOrderType(3);
                        orderPool.setHouseId(id);
                        orderPool.setApplyId(applyId);
                        //开启抢单
                        orderPool.setIsOpenOrder(1);
                        orderPool.setRemark("客服转单插入投诉订单");
                        orderPool.setCreateBy(userId);
                        orderPool.setCreateTime(date);
                        ResultVo orderPoolInsert = orderService.insert(orderPool);
                        if(orderPoolInsert.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                            //插入订单池日志
                            HsSystemOrderPool pool = (HsSystemOrderPool) orderPoolInsert.getDataSet();
                            HsSystemOrderPoolLog systemOrderPoolLog = new HsSystemOrderPoolLog();
                            //订单池主键ID
                            systemOrderPoolLog.setPoolId(pool.getId());
                            //投诉订单
                            systemOrderPoolLog.setOrderType(3);
                            //加入订单池
                            systemOrderPoolLog.setNodeType(0);
                            systemOrderPoolLog.setCreateBy(pool.getCreateBy());
                            systemOrderPoolLog.setCreateTime(date);
                            systemOrderPoolLog.setPostTime(date);
                            //操作人用户ID
                            systemOrderPoolLog.setOperatorUid(pool.getCreateBy());
                            //操作人类型(1:普通会员)
                            systemOrderPoolLog.setOperatorType(3);
                            systemOrderPoolLog.setRemarks("客服转单插入投诉订单");
                            //新增系统订单池日志信息
                            resultVo = orderService.insert(systemOrderPoolLog);
                        }
                    }
                }
            }
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 房源投诉关单
     * @param id 房源投诉id
     * @return
     */
    @Override
    public ResultVo houseComplainClose(Integer id,Integer userId){
        ResultVo resultVo = new ResultVo();
        Map houseComplainMap = new HashMap(16);
        try {
            resultVo = housesService.select(id,new HsHouseComplain());
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                HsHouseComplain houseComplain = (HsHouseComplain) resultVo.getDataSet();
                if(houseComplain == null){
                    return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,ResultConstant.SYS_REQUIRED_FAILURE_VALUE + "：投诉订单不存在");
                }
                //修改投诉订单状态
                //投诉状态：0未接单 1业务员处理 2业务员处理完成 3已关单
                houseComplain.setStatus(3);
                houseComplain.setCloseBy(userId);
                houseComplain.setUpdateBy(userId);
                resultVo = housesService.update(houseComplain);
            }
            resultVo.setDataSet(houseComplainMap);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 根据房源code获取房源信息
     * @param houseCode 房源code
     * @return
     */
    @Override
    public ResultVo getHouseByCode(String houseCode){
        ResultVo resultVo = new ResultVo();
        try {
            //获取房源信息
            Map<Object,Object> condition = new HashMap<>(2);
            //自定义查询列名
            List<String> queryColumn = new ArrayList<>();
            queryColumn.add("ID id");
            queryColumn.add("HOUSE_NAME houseName");
            queryColumn.add("LEASE_TYPE leaseType");
            queryColumn.add("HOUSE_CODE houseCode");
            queryColumn.add("CITY city");
            queryColumn.add("COMMUNITY community");
            queryColumn.add("SUB_COMMUNITY subCommunity");
            queryColumn.add("COMMUNITY community");

            condition.put("queryColumn",queryColumn);
            condition.put("isDel",0);
            condition.put("houseCode",houseCode);
            resultVo = housesService.selectCustomColumnNamesList(HsMainHouse.class, condition);
            if(resultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS){
                logger.error("lsg: getHouseByCode 获取房源信息失败");
                resultVo.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                resultVo.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE + ":获取房源信息失败");
                return resultVo;
            }
            List<Map<Object, Object>> houseList = (List<Map<Object, Object>>) resultVo.getDataSet();
            if(houseList == null || houseList.size() < 1){
                logger.error("lsg: getHouseByCode 房源信息不存在");
                resultVo.setResult(ResultConstant.HOUSES_DATA_EXCEPTION);
                resultVo.setMessage(ResultConstant.HOUSES_DATA_EXCEPTION_VALUE + ":房源信息不存在");
                return resultVo;
            }
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     *  房源投诉详情
     * @param id
     * @return
     */
    @Override
    public ResultVo getHouseComplainDetail(Integer id) {
        ResultVo resultVo = new ResultVo();
        Map houseComplainMap = new HashMap(16);
        try {
            resultVo = housesService.select(id,new HsHouseComplain());
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                HsHouseComplain houseComplain = (HsHouseComplain) resultVo.getDataSet();
                if(houseComplain == null){
                    return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                }
                int houseId = houseComplain.getHouseId();

                //封装房源信息
                //获取房源信息
                ResultVo houseResultVo = housesService.select(houseId, new HsMainHouse());
                if(houseResultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS || houseResultVo.getDataSet() == null){
                    return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                }
                HsMainHouse house = (HsMainHouse) houseResultVo.getDataSet();
                //预约类型（0：出租，1：出售）
                Integer leaseType = StringUtil.getAsInt(StringUtil.trim(house.getLeaseType()));
                //城市
                String city = StringUtil.trim(house.getCity());
                //社区
                String community = StringUtil.trim(house.getCommunity());
                //子社区
                String subCommunity = StringUtil.trim(house.getSubCommunity());
                //房源所在区域名称
                String address = StringUtil.trim(house.getAddress());
                //房源主图
                String houseMainImg = StringUtil.trim(house.getHouseMainImg());
                if(StringUtil.hasText(houseMainImg)){
                    houseMainImg = ImageUtil.imgResultUrl(houseMainImg);
                }
                String complainProofPic1 = ImageUtil.imgResultUrl(houseComplain.getComplainProofPic1());
                String complainProofPic2 = ImageUtil.imgResultUrl(houseComplain.getComplainProofPic2());
                String complainProofPic3 = ImageUtil.imgResultUrl(houseComplain.getComplainProofPic3());
                /**
                 * 封装投诉人信息
                 */
                //投诉人姓名
                String name = "";
                Map<Object, Object> condition = new HashMap<>(3);
                List<String> queryColumn = new ArrayList<>();
                //投诉人联系电话
                String mobile = houseComplain.getMobile();
                //投诉来源 (1客户 2外获 3外看 4区域长)
                Integer platform = houseComplain.getPlatform();
                if(platform == 1){
                    //客户 获取 hs_member 表信息
                    //姓氏
                    queryColumn.add("FAMILY_NAME familyName");
                    //名称
                    queryColumn.add("NAME name");
                    condition.put("isDel",0);
                    condition.put("memberMoble",mobile);
                    ResultVo memberResultVo = memberService.selectCustomColumnNamesList(new HsMember(), condition);
                    if(memberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && memberResultVo.getDataSet() != null){
                        List<Map<Object,Object>> memberList = (List<Map<Object,Object>>) memberResultVo.getDataSet();
                        if(memberList.size() > 0){
                            Map<Object, Object> memberMap = memberList.get(0);
                            String familyName = StringUtil.trim(memberMap.get("familyName"));
                            String memberName = StringUtil.trim(memberMap.get("name"));
                            name = familyName + memberName;
                        }
                    }
                }else{
                    //业务员 获取 hs_sys_user 表信息
                    queryColumn.add("USERNAME username");
                    condition.put("isDel",0);
                    condition.put("mobile",mobile);
                    ResultVo userResultVo = memberService.selectCustomColumnNamesList(new HsSysUser(), condition);
                    if(userResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && userResultVo.getDataSet() != null){
                        List<Map<Object, Object>> userList = (List<Map<Object, Object>>) userResultVo.getDataSet();
                        if(userList.size() > 0){
                            Map<Object, Object> userMap = userList.get(0);
                            name = StringUtil.trim(userMap.get("username"));
                        }
                    }
                }

                JSONObject jsonObject = JSON.parseObject(JSONObject.toJSONString(houseComplain, SerializerFeature.WriteMapNullValue));
                houseComplainMap = JSON.toJavaObject(jsonObject, Map.class);
                houseComplainMap.put("leaseType",leaseType);
                houseComplainMap.put("city",city);
                houseComplainMap.put("community",community);
                houseComplainMap.put("subCommunity",subCommunity);
                houseComplainMap.put("address",address);
                houseComplainMap.put("houseMainImg",houseMainImg);
                houseComplainMap.put("complainProofPic1",complainProofPic1);
                houseComplainMap.put("complainProofPic2",complainProofPic2);
                houseComplainMap.put("complainProofPic3",complainProofPic3);
                houseComplainMap.put("name",name);
            }
            resultVo.setDataSet(houseComplainMap);
        }catch (Exception e){
            logger.error("remote procedure call getHouseComplainDetail is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 房源评价表列表
     * @param condition
     * @return
     */
    @Override
    public ResultVo getHouseEvaluationList(Map<Object, Object> condition) {
        ResultVo resultVo = null;
        try {
            resultVo = housesService.selectList(new HsHouseEvaluation(),condition,1);
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                List<HsHouseEvaluation> lists = (List<HsHouseEvaluation>) resultVo.getDataSet();
                if(lists!=null && lists.size()>0){
                    List<Integer> houseIds = Lists.newArrayListWithCapacity(lists.size());
                    for (HsHouseEvaluation houseEvaluation : lists) {
                        houseIds.add(houseEvaluation.getHouseId());
                        String evaluationImg1 = houseEvaluation.getEvaluationImg1();
                        String evaluationImg2 = houseEvaluation.getEvaluationImg2();
                        String evaluationImg3 = houseEvaluation.getEvaluationImg3();
                        if(StringUtil.hasText(evaluationImg1)){
                            houseEvaluation.setEvaluationImg1(ImageUtil.IMG_URL_PREFIX+evaluationImg1);
                        }
                        if(StringUtil.hasText(evaluationImg2)){
                            houseEvaluation.setEvaluationImg2(ImageUtil.IMG_URL_PREFIX+evaluationImg2);
                        }
                        if(StringUtil.hasText(evaluationImg3)){
                            houseEvaluation.setEvaluationImg3(ImageUtil.IMG_URL_PREFIX+evaluationImg3);
                        }
                    }
                }
            }

        }catch (Exception e){
            logger.error("remote procedure call getHouseEvaluationList is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 房源评价详情
     * @param id
     * @return
     */
    @Override
    public ResultVo getHouseEvaluationDetail(Integer id) {
        ResultVo resultVo = null;
        try {
            resultVo = housesService.select(id,new HsHouseEvaluation());
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                HsHouseEvaluation houseEvaluation = (HsHouseEvaluation) resultVo.getDataSet();
                if(houseEvaluation == null){
                    return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
                }
                String evaluationImg1 = houseEvaluation.getEvaluationImg1();
                String evaluationImg2 = houseEvaluation.getEvaluationImg2();
                String evaluationImg3 = houseEvaluation.getEvaluationImg3();
                if(StringUtil.hasText(evaluationImg1)){
                    houseEvaluation.setEvaluationImg1(ImageUtil.IMG_URL_PREFIX+evaluationImg1);
                }
                if(StringUtil.hasText(evaluationImg2)){
                    houseEvaluation.setEvaluationImg2(ImageUtil.IMG_URL_PREFIX+evaluationImg2);
                }
                if(StringUtil.hasText(evaluationImg3)){
                    houseEvaluation.setEvaluationImg3(ImageUtil.IMG_URL_PREFIX+evaluationImg3);
                }
            }
        }catch (Exception e){
            logger.error("remote procedure call getHouseEvaluationDetail is error" +e);
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 业主联系客服上传
     * @param apply 业主申请表
     * @param houseCredentialsData
     * @param areaCode
     * @param memberMobile
     * @return
     * @throws IllegalAccessException
     */
    @Override
    public ResultVo addOwnerApply(HsOwnerHousingApplication apply, HsHouseCredentialsData houseCredentialsData, String areaCode, String memberMobile,Integer applyId,Integer userid) {
        ResultVo result = new ResultVo();
        try {
            Map<Object,Object> condition = Maps.newHashMap();

            //memberService.login(condition);

            if(applyId != null){
                //修改
                apply.setId(applyId);
                apply.setUpdateBy(userid);
                ResultVo houseUpdate = housesService.update(apply);
                if(houseUpdate.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    Integer credentialsId = houseCredentialsData.getId();
                    //图片id不为null 修改图片
                    if(credentialsId != null){
                        ResultVo update = housesService.update(houseCredentialsData);
                        if(update.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                            return update;
                        }
                    }
                    return houseUpdate;
                }
            }
            //TODO 新增人员id
//            apply.setMemberId(userid);
            apply.setApplyType(1);//申请类型（0：自主完善，1：联系客服上传，2：业务员上传）
            apply.setIsCustomerServiceRelation(1);
            apply.setCreateBy(userid);


            //生成申请code
            apply.setApplyCode("AC_" + RandomUtils.getRandomNumbersAndLetters(32));
            Date date = new Date();
            apply.setCreateTime(date);
            apply.setUpdateTime(date);
            ResultVo insertVo = housesService.insert(apply);//保存业主提交的房源信息
            if (insertVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                HsOwnerHousingApplication dataSet = (HsOwnerHousingApplication) insertVo.getDataSet();
                Integer id = dataSet.getId();
                houseCredentialsData.setApplyId(id); //申请ID
                houseCredentialsData.setApplicantType(apply.getApplicantType());
                houseCredentialsData.setLanguageVersion(apply.getLanguageVersion());
                ResultVo credentialsResult = housesService.insert(houseCredentialsData);

                System.out.println(houseCredentialsData.toString());
                if (credentialsResult.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                    HsOwnerHousingApplicationLog ownerHousingApplyLog = new HsOwnerHousingApplicationLog();
                    //房源申请信息的ID
                    ownerHousingApplyLog.setApplyId(id);
                    ownerHousingApplyLog.setNodeType(0);
                    //ownerHousingApplyLog.setIsDel(0);有默认值可不手动设置
                    ownerHousingApplyLog.setCreateBy(apply.getCreateBy());
                    ownerHousingApplyLog.setCreateTime(date);
                    ownerHousingApplyLog.setPostTime(date);
                    ResultVo logVo = housesService.insert(ownerHousingApplyLog);

                    /**
                     * 房源初审
                     */
                    condition.put("isCheck",2);
                    //房源申请ID
                    condition.put("id",id);
                    result = housesService.checkHousingApplyTx(condition);
                    if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                        //加入订单池
                        condition.putAll((Map<Object, Object>) result.getDataSet());
                        result = orderService.addSystemOrderPoolTx(condition);
                    }

                    if (result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                        //记录房源进度
                        //1.获取房源ID
                        Integer houseId = houseCredentialsData.getHouseId();
                        //2.封装进度信息
                        HsHouseProgress hsHouseProgress = new HsHouseProgress();
                        //房源ID
                        hsHouseProgress.setHouseId(houseId);
                        //创建人
                        hsHouseProgress.setCreateBy(apply.getCreateBy());
                        //进度
                        hsHouseProgress.setProgressCode("101");
                        //创建日期
                        hsHouseProgress.setCreateTime(date);
                        //3.插入数据
                        ResultVo insert = housesService.insert(hsHouseProgress);
                        if (insert.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                            return insert;
                        }
                    }
                }
            }
            return result;
        } catch (Exception e) {
            e.printStackTrace();
            result.setResult(ResultConstant.HOUSES_DATA_EXCEPTION);
            result.setMessage("addOwnerHousingApply Exception message:" + e.getMessage());
        }
        return result;
    }

    /**
     * 房源编辑（终审）
     * @param house                房源信息
     * @param houseCredentialsData 房源图片信息
     * @return
     */
    @Override
    public ResultVo houseEdit(HsMainHouse house, HsHouseCredentialsData houseCredentialsData){
        ResultVo result = new ResultVo();
        //修改
        try {
            result = housesService.update(house);
            if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                result = housesService.update(houseCredentialsData);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;

    }

    /**
     * 获取房源自动应答
     *
     * @param condition
     * @return
     */
    @Override
    public ResultVo getAutoReplySetting(Map<Object, Object> condition) {
        ResultVo result = new ResultVo();
        Map<Object, Object> resultMap = new HashMap<>(4);
        try {
            String houseIdStr = StringUtil.trim(condition.get("houseId"));
            //房源id不为空，按照房源id查询自动应答信息
            if(StringUtil.hasText(houseIdStr)){
                //房源ID
                int houseId = StringUtil.getAsInt(houseIdStr);
                //根据房源ID查询房源信息
                result = housesService.select(houseId, new HsMainHouse());
                if (result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                    HsMainHouse mainHouse = (HsMainHouse) result.getDataSet();
                    if (mainHouse != null) {
                        int leaseType = mainHouse.getLeaseType();
                        //resultMap.put("isAutoAnswer",isAutoAnswer);
                        resultMap.put("leaseType", leaseType);

                        //根据房源ID查询自动应答设置信息
                        condition.put("isDel", 0);
                        ResultVo replyResult = housesService.selectList(new HsHouseAutoReplySetting(), condition, 0);
                        if (replyResult.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                            List<Map<Object, Object>> replyList = (List<Map<Object, Object>>) replyResult.getDataSet();
                            if (replyList.size() > 0) {
                                for (Map<Object, Object> map : replyList) {
                                    map.remove("isDel");
                                }
                                resultMap.put("autoAnswerList", replyList);
                            }
                        }
                    } else {
                        resultMap.put("isAutoAnswer", null);
                        resultMap.put("leaseType", null);
                        resultMap.put("autoAnswerList", null);
                    }
                    result.setDataSet(resultMap);
                    return result;
                }
            }
            String applyIdStr = StringUtil.trim(condition.get("applyId"));
            //房源id 为空申请id不为空按照申请id查询自动应答信息
            if(StringUtil.hasText(applyIdStr)){
                int applyId = StringUtil.getAsInt(applyIdStr);
                //查询申请信息
                result = housesService.select(applyId, new HsOwnerHousingApplication());
                if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    HsOwnerHousingApplication application = (HsOwnerHousingApplication) result.getDataSet();
                    if(application != null){
                        Integer leaseType = application.getLeaseType();
                        resultMap.put("leaseType", leaseType);

                        //根据房源申请ID查询自动应答设置信息
                        condition.put("isDel", 0);
                        ResultVo replyResult = housesService.selectList(new HsHouseAutoReplySetting(), condition, 0);
                        if (replyResult.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                            List<Map<Object, Object>> replyList = (List<Map<Object, Object>>) replyResult.getDataSet();
                            if (replyList.size() > 0) {
                                for (Map<Object, Object> map : replyList) {
                                    map.remove("isDel");
                                }
                                resultMap.put("autoAnswerList", replyList);
                            }
                        }
                    }else{
                        resultMap.put("isAutoAnswer", null);
                        resultMap.put("leaseType", null);
                        resultMap.put("autoAnswerList", null);
                    }
                    result.setDataSet(resultMap);
                    return result;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            result.setDataSet(null);
            result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
            result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
        }

        return result;
    }

    /**
     * 设置自动应答
     *
     * @param houseAutoReplySetting
     * @return
     */
    @Override
    public ResultVo addAutoReplySetting(HsHouseAutoReplySetting houseAutoReplySetting) {
        ResultVo result = new ResultVo();
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            if (houseAutoReplySetting != null) {
                //自动应答ID
                Integer id = houseAutoReplySetting.getId() == null ? 0 : houseAutoReplySetting.getId();
                //房源ID
                Integer houseId = houseAutoReplySetting.getHouseId() == null ? 0 : houseAutoReplySetting.getHouseId();
                String startRentDate = StringUtil.trim(houseAutoReplySetting.getStartRentDate());
                //当起租日期不为空时，设置起租日期格式
                if (StringUtil.hasText(startRentDate)) {
                    houseAutoReplySetting.setBeginRentDate(sdf.parse(startRentDate));
                }
                //根据自动应答ID查询自动应答设置信息
                Map<Object, Object> condition = new HashMap<>(2);
                condition.put("id", id);
                condition.put("isDel", 0);
                ResultVo replyResult = housesService.selectList(new HsHouseAutoReplySetting(), condition, 0);
                if (replyResult.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                    //自动应答信息结果集
                    List<Map<Object, Object>> replyList = (List<Map<Object, Object>>) replyResult.getDataSet();
                    if (replyList.size() > 0) {
                        //数据库中是否存在当前房源信息
                        boolean isExist = false;
                        //遍历判断需要修改得房源信息是否存在数据库中
                        for (Map<Object, Object> objectObjectMap : replyList) {
                            String tId = StringUtil.trim(objectObjectMap.get("id"));
                            if (tId.equals(id.toString())) {
                                //为避免is_del为null设置is_del值
                                String isDel = StringUtil.trim(objectObjectMap.get("isDel"));
                                houseAutoReplySetting.setIsDel(Integer.parseInt(isDel));
                                isExist = true;
                                break;
                            }
                        }
                        if (!isExist) {
                            result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                            result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE + ":未查询到房源信息！");
                            return result;
                        }
                        //修改数据
                        ResultVo updateSettingResult = housesService.update(houseAutoReplySetting);
                        if (updateSettingResult.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {
                            result = updateSettingResult;
                            return result;
                        }
                    } else {
                        //根据房源ID查询自动应答设置信息
                        condition.clear();
                        condition.put("houseId", houseId);
                        condition.put("isDel", 0);
                        ResultVo resultVo = housesService.selectList(new HsHouseAutoReplySetting(), condition, 0);
                        //房源信息结果集
                        List<Map<Object, Object>> dataSet = (List<Map<Object, Object>>) resultVo.getDataSet();
                        if (dataSet.size() > 2) {
                            result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
                            result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE + ":自动应答最多只能设置3条！");
                            return result;
                        }
                        // 新增
                        ResultVo insertSettingResult = housesService.insert(houseAutoReplySetting);
                        if (insertSettingResult.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS) {
                            result = insertSettingResult;
                            return result;
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            result.setDataSet(null);
            result.setResult(ResultConstant.SYS_REQUIRED_FAILURE);
            result.setMessage(ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
        }
        return result;
    }

    /**
     * 删除房源自动应答
     * @param autoReplyId
     * @return
     */
    @Override
    public ResultVo deleteAutoReply(String autoReplyId) {
        ResultVo result = new ResultVo();
        Map<Object, Object> map = new HashMap<>(1);
        List<HsHouseAutoReplySetting> list = new ArrayList<>();
        HsHouseAutoReplySetting hsHouseAutoReplySetting = new HsHouseAutoReplySetting();
        hsHouseAutoReplySetting.setId(Integer.parseInt(autoReplyId));
        hsHouseAutoReplySetting.setIsDel(1);
        list.add(hsHouseAutoReplySetting);
        map.put("list", list);
        result = housesService.batchUpdate(new HsHouseAutoReplySetting(), map);
        return result;
    }

    /**
     * 修改房源租金/预约看房时间
     * @param condition
     * @return
     */
    @Override
    public ResultVo updateHousingInfo(Map<Object,Object> condition) {
        ResultVo result = new ResultVo();
        try {
            int memberId = Integer.parseInt(StringUtil.trim(condition.get("memberId")));
            int id = Integer.parseInt(StringUtil.trim(condition.get("id")));

            ResultVo houseResult = housesService.select(id,new HsMainHouse());
            if(houseResult.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                HsMainHouse mainHouse = (HsMainHouse) houseResult.getDataSet();
                HsMainHouse hsMainHouse = new HsMainHouse();
                HsHouseLog houseLog = new HsHouseLog();
                hsMainHouse.setId(id);
                if(StringUtil.hasText(StringUtil.trim(condition.get("houseRent")))){
                    BigDecimal houseRent = new BigDecimal(condition.get("houseRent")+"");
                    hsMainHouse.setHouseRent(houseRent);
                    houseLog.setRemarks("修改价格");
                }
                //查询房源信息，如果发布价格为空，为第一次修改，设置租金/出售价为发布价格
                if(!StringUtil.hasText(mainHouse.getStandby1())){
                    hsMainHouse.setStandby1(mainHouse.getHouseRent()+"");
                }
                //是否客服联系
                if(StringUtil.hasText(StringUtil.trim(condition.get("isCustomerServiceRelation")))){
                    hsMainHouse.setAppointmentLookTime(StringUtil.trim(condition.get("appointmentLookTime"))); //预约时间
                    hsMainHouse.setIsCustomerServiceRelation(StringUtil.getAsInt(StringUtil.trim(condition.get("isCustomerServiceRelation")))); //是否客服联系
                    hsMainHouse.setAdvanceReservationDay(StringUtil.getAsInt(StringUtil.trim(condition.get("advanceReservationDay")))); //提前几天预约
                    houseLog.setRemarks("修改预约看房时间");
                }

                hsMainHouse.setVersionNo(0);
                result = housesService.update(hsMainHouse);

                if(result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                    //记录操作日志
                    Date date = new Date();
                    houseLog.setNodeType(Constant.PASS_AUDIT_HOUSES_STATUS); //业主申请下架
                    houseLog.setUpdateBy(memberId); //更新人为提交申请的人（当前登录用户）
                    houseLog.setCreateBy(memberId);
                    houseLog.setBid(0);
                    houseLog.setHouseId(hsMainHouse.getId());
                    houseLog.setOperatorUid(memberId);
                    houseLog.setOperatorType(1); //1：普通会员，2：商家，3：系统管理员
                    houseLog.setCreateTime(date);
                    houseLog.setUpdateTime(date);
                    houseLog.setPostTime(date);
                    result = housesService.insert(houseLog);
                }

            }

        } catch (Exception e) {
            e.printStackTrace();
            result.setDataSet(null);
            result.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            result.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return result;
    }


    /**
     * 查询预约看房时间
     * @param condition
     * @return
     */
    @Override
    public ResultVo getHouseSettingTime(Map<Object, Object> condition) {
        ResultVo result = new ResultVo();
        List<Map<Object, Object>> timeList = new ArrayList<>();
        try {
            int houseId = StringUtil.getAsInt(StringUtil.trim(condition.get("houseId"))); //房源ID
            result = housesService.select(houseId, new HsMainHouse());
            if (result.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS) {
                HsMainHouse mainHouse = (HsMainHouse) result.getDataSet();
                if(null == mainHouse){
                    return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE,"房源数据异常");
                }
                String appointLookTime = mainHouse.getAppointmentLookTime();
                if (StringUtil.hasText(appointLookTime)) {

                    //时间格式 Mon 13:00,19:00,20:00;Tue 13:00,19:00,20:00;Wed 13:00,19:00,20:00;Thur ;Fri ;Sat ;Sun ;
                    //获取每天设置的时间点
                    String[] weeksArray = appointLookTime.split(";");
                    List<String> weeks = Arrays.asList(weeksArray);
                    if (weeks.size() > 0) {
                        for (String week : weeks) {
                            Map<Object, Object> weekMap = new HashMap<>();
                            String[] timeSplit = week.split(" ");
                            if(timeSplit!=null && timeSplit.length>0){
                                if (timeSplit.length > 1) {
                                    String[] times = timeSplit[1].split(",");
                                    if (times.length > 0) {
                                        List<String> timeArray = Arrays.asList(times);
                                        weekMap.put("time", timeArray);
                                    } else {
                                        weekMap.put("time", null);
                                    }
                                } else {
                                    weekMap.put("time", null);
                                }
                                weekMap.put("week", timeSplit[0]);
                            }else{//
                                weekMap.put("week",null);
                                weekMap.put("time", null);
                            }

                            timeList.add(weekMap);
                        }
                    }
                }

                result.setDataSet(timeList);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return ResultVo.error(ResultConstant.SYS_REQUIRED_FAILURE, ResultConstant.SYS_REQUIRED_FAILURE_VALUE);
        }
        return result;
    }

    /**
     * 意见反馈列表
     * @param condition
     * @return
     */
    @Override
    public ResultVo getFeedbackList(Map<Object, Object> condition){
        ResultVo resultVo = new ResultVo();
        try {
            resultVo = memberService.selectList(new HsFeedback(),condition,0);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 意见反馈详情
     * @param id 反馈id
     * @return
     */
    @Override
    public ResultVo getFeedbackDetail(Integer id){
        ResultVo resultVo = new ResultVo();
        try {
            //反馈人姓名
            String name = "";
            HsFeedback feedback = new HsFeedback();
            ResultVo feedbackResultVo = memberService.select(id, new HsFeedback());
            if(feedbackResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && feedbackResultVo.getDataSet() != null){
                HsFeedback hsFeedback = (HsFeedback) feedbackResultVo.getDataSet();
                Integer memberId = hsFeedback.getCreateBy();
                //查询member表
                ResultVo memberResultVo = memberService.select(memberId, new HsMember());
                if(memberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && memberResultVo.getDataSet() != null){
                    HsMember member = (HsMember) memberResultVo.getDataSet();
                    String familyName = StringUtil.trim(member.getFamilyName());
                    String memberName = StringUtil.trim(member.getName());
                    name = familyName + memberName;
                }
                //member未查询到反馈人姓名，反馈人可能是业务员，查询user表
                if(!StringUtil.hasText(name)){
                    ResultVo userResultVo = memberService.select(memberId, new HsSysUser());
                    if(userResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && userResultVo.getDataSet() != null){
                        HsSysUser user = (HsSysUser) userResultVo.getDataSet();
                        name = StringUtil.trim(user.getUsername());
                    }
                }
                feedback = (HsFeedback) feedbackResultVo.getDataSet();
            }
            //封装返回值
            JSONObject jsonObject = JSON.parseObject(JSONObject.toJSONString(feedback, SerializerFeature.WriteMapNullValue));
            Map feedbackMap = JSON.toJavaObject(jsonObject, Map.class);
            feedbackMap.put("name",name);
            resultVo.setDataSet(feedbackMap);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 修改意见反馈（增加备注、处理反馈）
     * @param hsFeedback
     * @return
     */
    @Override
    public ResultVo updateFeedback(HsFeedback hsFeedback){
        ResultVo resultVo = new ResultVo();
        try {
            resultVo = memberService.update(hsFeedback);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 获取房源下架详情
     * @param id  下架id
     * @return
     */
    @Override
    public ResultVo getObtained(Integer id){
        ResultVo resultVo = new ResultVo();
        try {
            ResultVo obtainedResultVo = housesService.select(id, new HsHouseObtained());
            if(obtainedResultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS){
                return obtainedResultVo;
            }
            HsHouseObtained obtained = (HsHouseObtained) obtainedResultVo.getDataSet();
            if(obtained == null){
                return resultVo;
            }
            /**
             * 获取房源信息
             */
            HsMainHouse house = new HsMainHouse();
            //房源id
            Integer houseId = obtained.getHouseId();
            ResultVo houseResultVo = housesService.select(houseId, new HsMainHouse());
            if(houseResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && houseResultVo.getDataSet() != null){
                house = (HsMainHouse) houseResultVo.getDataSet();
            }
            /**
             * 获取业主信息
             */
            HsMember member = new HsMember();
            Integer memberId = StringUtil.getAsInt(StringUtil.trim(house.getMemberId()));
            ResultVo memberResultVo = memberService.select(memberId, new HsMember());
            if(memberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && memberResultVo.getDataSet() != null){
                member = (HsMember)memberResultVo.getDataSet();
            }
            /**
             * 封装返回值
             */
            Map<String,Object> obtainedMap;
            JSONObject jsonObject = JSON.parseObject(JSONObject.toJSONString(obtained, SerializerFeature.WriteMapNullValue));
            obtainedMap = JSON.toJavaObject(jsonObject, Map.class);
            //封装房源信息
            //预约类型（0：出租，1：出售）
            obtainedMap.put("leaseType",house.getLeaseType());
            //城市
            obtainedMap.put("city",StringUtil.trim(house.getCity()));
            //社区
            obtainedMap.put("community",StringUtil.trim(house.getCommunity()));
            //子社区
            obtainedMap.put("subCommunity",StringUtil.trim(house.getSubCommunity()));
            //房源所在区域名称
            obtainedMap.put("address",StringUtil.trim(house.getAddress()));
            //房源主图
            obtainedMap.put("houseMainImg",ImageUtil.imgResultUrl(house.getHouseMainImg()));
            //封装业主信息
            obtainedMap.put("memberMobile",StringUtil.trim(member.getMemberMoble()));
            //业主姓名
            obtainedMap.put("nickName",StringUtil.trim(member.getFamilyName()) + StringUtil.trim(member.getName()));
            resultVo.setDataSet(obtainedMap);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 修改房源下架信息（增加备注、取消下架、完成下架）
     * @param hsHouseObtained 房源下架申请
     * @return
     */
    @Override
    public ResultVo updateObtained(HsHouseObtained hsHouseObtained){
        ResultVo resultVo = new ResultVo();
        try {
            resultVo = housesService.update(hsHouseObtained);
            if(resultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS){
                Integer status = hsHouseObtained.getStatus();
                if(status == 2){
                    /**
                     * 完成下架 锁定房源
                     */
                    //房源id
                    Integer houseId = hsHouseObtained.getHouseId();
                    housesService.select(houseId,new HsMainHouse());

                }
            }
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 房源下架申请列表
     * @param condition houseConfigDictcode
     * @return
     */
    @Override
    public ResultVo getObtainedList(Map<Object, Object> condition){
        ResultVo resultVo = new ResultVo();
        List<Map<Object,Object>> resultList = new ArrayList<>();
        try {
            /**
             * 获取房源申请下架申请信息
             */
            resultVo = housesService.selectCustomColumnNamesList(HsHouseObtained.class,condition);
            if(resultVo.getResult() != ResultConstant.SYS_REQUIRED_SUCCESS){
                return resultVo;
            }
            //房源申请下架申请
            List<Map<Object, Object>> obtainedList = (List<Map<Object, Object>>) resultVo.getDataSet();
            if(obtainedList == null || obtainedList.size() < 1){
                return resultVo;
            }
            /**
             * 房源列表
             */
            List<Map<Object, Object>> houseList = new ArrayList<>();
            //房源id列表
            List<Integer> houseIds = obtainedList.stream().map(obtained -> StringUtil.getAsInt(StringUtil.trim(obtained.get("houseId")))).collect(Collectors.toList());
            if(houseIds.size() > 0){
                //获取房源信息
                condition.clear();
                condition.put("houseIds",houseIds);
                condition.put("isDel",0);
                ResultVo housesResultVo = housesService.selectList(new HsMainHouse(), condition, 0);
                if(housesResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && housesResultVo.getDataSet() != null){
                    houseList = (List<Map<Object, Object>>) housesResultVo.getDataSet();
                }else{
                    logger.error("lsq: getObtainedList 获取房源信息失败");
                }
            }
            /**
             * 业主信息列表
             */
            List<HsMember> memberList = new ArrayList<>();
            //业主id列表
            List<Integer> memberIds = houseList.stream().map(house -> StringUtil.getAsInt(StringUtil.trim(house.get("memberId")))).collect(Collectors.toList());
            if(memberIds.size() > 0){
                //获取业主信息
                condition.clear();
                condition.put("memberIds",memberIds);
                condition.put("isDel",0);
                ResultVo memberResultVo = memberService.selectList(new HsMember(), condition, 0);
                if(memberResultVo.getResult() == ResultConstant.SYS_REQUIRED_SUCCESS && memberResultVo.getDataSet() != null){
                    memberList = (List<HsMember>) memberResultVo.getDataSet();
                }else{
                    logger.error("lsq: getObtainedList 获取业主信息失败");
                }
            }
            /**
             * 封装结果集
             */
            for (Map<Object, Object> obtainedMap : obtainedList) {
                //房源id
                int houseId = StringUtil.getAsInt(StringUtil.trim(obtainedMap.get("houseId")));
                //预约类型（0：出租，1：出售）
                Integer leaseType = null;
                //城市
                String city = "";
                //社区
                String community = "";
                //子社区
                String subCommunity = "";
                //房源所在区域名称
                String address = "";
                //房源主图
                String houseMainImg = "";
                //业主id
                Integer memberId = -1;
                //业主电话
                String memberMobile = "";
                Optional<Map<Object, Object>> houseOptional = houseList.stream().filter(house -> StringUtil.getAsInt(StringUtil.trim(house.get("id"))) == houseId).findFirst();
                if(houseOptional.isPresent()){
                    //房源信息
                    Map<Object, Object> houseMap = houseOptional.get();
                    leaseType = StringUtil.getAsInt(StringUtil.trim(houseMap.get("leaseType")));
                    city = StringUtil.trim(houseMap.get(city));
                    community = StringUtil.trim(houseMap.get("community"));
                    subCommunity = StringUtil.trim(houseMap.get("subCommunity"));
                    address = StringUtil.trim(houseMap.get("address"));
                    houseMainImg = ImageUtil.imgResultUrl(StringUtil.trim(houseMap.get("houseMainImg")));
                    memberId = StringUtil.getAsInt(StringUtil.trim(houseMap.get("memberId")));
                }

                Integer finalMemberId = memberId;
                Optional<HsMember> memberOptional = memberList.stream().filter(member -> member.getId().equals(finalMemberId)).findFirst();
                if(memberOptional.isPresent()){
                    //业主信息
                    HsMember memberMap = memberOptional.get();
                    memberMobile = StringUtil.trim(memberMap.getMemberMoble());
                }
                //封装房源、业主信息
                obtainedMap.put("leaseType",leaseType);
                obtainedMap.put("city",city);
                obtainedMap.put("community",community);
                obtainedMap.put("subCommunity",subCommunity);
                obtainedMap.put("address",address);
                obtainedMap.put("houseMainImg",houseMainImg);
                obtainedMap.put("memberMobile",memberMobile);
                resultList.add(obtainedMap);
            }
            resultVo.setDataSet(resultList);
        }catch (Exception e){
            e.printStackTrace();
            resultVo.setResult(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR);
            resultVo.setMessage(ResultConstant.SYS_REQUIRED_TIMEOUT_ERROR_VALUE);
        }
        return resultVo;
    }

    /**
     * 处理图片路径返回值
     * @param str
     * @return
     */
    public String splice(String str){
        if(StringUtil.hasText(str)){
            String[] split = str.split(",");
            String splice = "";
            for (String s : split) {
                splice += ImageUtil.IMG_URL_PREFIX + s + ",";
            }
            if(splice.endsWith(",")){
                splice = splice.substring(0,splice.length() - 1);
            }
            str = splice;
        }
        return str;
    }

    /**
     * 处理'业主提供资料及证件'表图片
     * @param houseCredentials
     * @return
     */
    public HsHouseCredentialsData credentialsImg(HsHouseCredentialsData houseCredentials){
        //POA复印件
        houseCredentials.setMandataryCopiesImg1(splice(houseCredentials.getMandataryCopiesImg1()));
        houseCredentials.setMandataryCopiesImg2(splice(houseCredentials.getMandataryCopiesImg2()));
        houseCredentials.setMandataryCopiesImg3(splice(houseCredentials.getMandataryCopiesImg3()));
        houseCredentials.setMandataryCopiesImg4(splice(houseCredentials.getMandataryCopiesImg4()));
        houseCredentials.setMandataryCopiesImg5(splice(houseCredentials.getMandataryCopiesImg5()));
        houseCredentials.setMandataryCopiesImg6(splice(houseCredentials.getMandataryCopiesImg6()));
        houseCredentials.setMandataryCopiesImg7(splice(houseCredentials.getMandataryCopiesImg7()));
        houseCredentials.setMandataryCopiesImg8(splice(houseCredentials.getMandataryCopiesImg8()));
        houseCredentials.setMandataryCopiesImg9(splice(houseCredentials.getMandataryCopiesImg9()));
        houseCredentials.setMandataryCopiesImg10(splice(houseCredentials.getMandataryCopiesImg10()));

        //被委托人护照照
        houseCredentials.setMandataryPassportImg1(splice(houseCredentials.getMandataryPassportImg1()));
        houseCredentials.setMandataryPassportImg2(splice(houseCredentials.getMandataryPassportImg2()));
        houseCredentials.setMandataryPassportImg3(splice(houseCredentials.getMandataryPassportImg3()));

        //被委托人签证照片
        houseCredentials.setMandataryVisaImg1(splice(houseCredentials.getMandataryVisaImg1()));
        houseCredentials.setMandataryVisaImg2(splice(houseCredentials.getMandataryVisaImg2()));
        houseCredentials.setMandataryVisaImg3(splice(houseCredentials.getMandataryVisaImg3()));

        //被委托人ID卡照片
        houseCredentials.setMandataryIdcardImg1(splice(houseCredentials.getMandataryIdcardImg1()));
        houseCredentials.setMandataryIdcardImg2(splice(houseCredentials.getMandataryIdcardImg2()));
        houseCredentials.setMandataryIdcardImg3(splice(houseCredentials.getMandataryIdcardImg3()));
        houseCredentials.setMandataryIdcardImg4(splice(houseCredentials.getMandataryIdcardImg4()));

        //委托书
        houseCredentials.setLetterAuthorization(splice(houseCredentials.getLetterAuthorization()));
        houseCredentials.setLetterAuthorization2(splice(houseCredentials.getLetterAuthorization2()));

        //房屋租赁委托人签字
        houseCredentials.setRentAuthorizationSignImg1(splice(houseCredentials.getRentAuthorizationSignImg1()));
        houseCredentials.setRentAuthorizationSignImg2(splice(houseCredentials.getRentAuthorizationSignImg2()));
        houseCredentials.setRentAuthorizationSignImg3(splice(houseCredentials.getRentAuthorizationSignImg3()));

        //formA确认
        houseCredentials.setFormaConfirmImg1(splice(houseCredentials.getFormaConfirmImg1()));
        houseCredentials.setFormaConfirmImg2(splice(houseCredentials.getFormaConfirmImg2()));
        houseCredentials.setFormaConfirmImg3(splice(houseCredentials.getFormaConfirmImg3()));

        //房产证照片
        houseCredentials.setPocImg1(splice(houseCredentials.getPocImg1()));
        houseCredentials.setPocImg2(splice(houseCredentials.getPocImg2()));
        houseCredentials.setPocImg3(splice(houseCredentials.getPocImg3()));

        //房屋产权人护照照片
        houseCredentials.setReoPassportImg1(splice(houseCredentials.getReoPassportImg1()));
        houseCredentials.setReoPassportImg2(splice(houseCredentials.getReoPassportImg2()));
        houseCredentials.setReoPassportImg3(splice(houseCredentials.getReoPassportImg3()));

        //房屋租赁合同图片
        houseCredentials.setHouseRentContractImg1(splice(houseCredentials.getHouseRentContractImg1()));
        houseCredentials.setHouseRentContractImg2(splice(houseCredentials.getHouseRentContractImg2()));
        houseCredentials.setHouseRentContractImg3(splice(houseCredentials.getHouseRentContractImg2()));
        houseCredentials.setHouseRentContractImg4(splice(houseCredentials.getHouseRentContractImg4()));

        //房屋户型图
        houseCredentials.setHouseHoldImg1(splice(houseCredentials.getHouseHoldImg1()));
        houseCredentials.setHouseHoldImg2(splice(houseCredentials.getHouseHoldImg2()));
        houseCredentials.setHouseHoldImg3(splice(houseCredentials.getHouseHoldImg3()));
        houseCredentials.setHouseHoldImg3(splice(houseCredentials.getHouseHoldImg4()));
        houseCredentials.setHouseHoldImg5(splice(houseCredentials.getHouseHoldImg5()));
        houseCredentials.setHouseHoldImg6(splice(houseCredentials.getHouseHoldImg6()));
        houseCredentials.setHouseHoldImg7(splice(houseCredentials.getHouseHoldImg7()));
        houseCredentials.setHouseHoldImg8(splice(houseCredentials.getHouseHoldImg8()));
        houseCredentials.setHouseHoldImg9(splice(houseCredentials.getHouseHoldImg9()));
        houseCredentials.setHouseHoldImg10(splice(houseCredentials.getHouseHoldImg10()));
        return houseCredentials;
    }
}
